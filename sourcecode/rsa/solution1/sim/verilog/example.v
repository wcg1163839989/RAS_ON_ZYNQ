// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="example,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z010clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.695000,HLS_SYN_LAT=2,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=583,HLS_SYN_LUT=162,HLS_VERSION=2018_3}" *)

module example (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        A_V_Addr_A,
        A_V_EN_A,
        A_V_WEN_A,
        A_V_Din_A,
        A_V_Dout_A,
        A_V_Clk_A,
        A_V_Rst_A,
        B_V_Addr_A,
        B_V_EN_A,
        B_V_WEN_A,
        B_V_Din_A,
        B_V_Dout_A,
        B_V_Clk_A,
        B_V_Rst_A
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [31:0] A_V_Addr_A;
output   A_V_EN_A;
output  [255:0] A_V_WEN_A;
output  [2047:0] A_V_Din_A;
input  [2047:0] A_V_Dout_A;
output   A_V_Clk_A;
output   A_V_Rst_A;
output  [31:0] B_V_Addr_A;
output   B_V_EN_A;
output  [255:0] B_V_WEN_A;
output  [2047:0] B_V_Din_A;
input  [2047:0] B_V_Dout_A;
output   B_V_Clk_A;
output   B_V_Rst_A;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg A_V_EN_A;
reg B_V_EN_A;
reg[255:0] B_V_WEN_A;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] A_V_addr_gep_fu_22_p3;
wire    ap_CS_fsm_state2;
wire   [31:0] B_V_addr_gep_fu_36_p3;
wire    ap_CS_fsm_state3;
wire   [2047:0] grp_fu_54_p2;
wire   [2046:0] lhs_V_fu_50_p0;
wire  signed [2047:0] grp_fu_54_p0;
reg   [2:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
end

example_add_2048sbkb #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 2048 ),
    .din1_WIDTH( 2048 ),
    .dout_WIDTH( 2048 ))
example_add_2048sbkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_54_p0),
    .din1(2048'd5),
    .ce(1'b1),
    .dout(grp_fu_54_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        A_V_EN_A = 1'b1;
    end else begin
        A_V_EN_A = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        B_V_EN_A = 1'b1;
    end else begin
        B_V_EN_A = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        B_V_WEN_A = 256'd115792089237316195423570985008687907853269984665640564039457584007913129639935;
    end else begin
        B_V_WEN_A = 256'd0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign A_V_Addr_A = A_V_addr_gep_fu_22_p3 << 32'd8;

assign A_V_Clk_A = ap_clk;

assign A_V_Din_A = 2048'd0;

assign A_V_Rst_A = ap_rst;

assign A_V_WEN_A = 256'd0;

assign A_V_addr_gep_fu_22_p3 = 64'd0;

assign B_V_Addr_A = B_V_addr_gep_fu_36_p3 << 32'd8;

assign B_V_Clk_A = ap_clk;

assign B_V_Din_A = grp_fu_54_p2;

assign B_V_Rst_A = ap_rst;

assign B_V_addr_gep_fu_36_p3 = 64'd0;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign grp_fu_54_p0 = $signed(lhs_V_fu_50_p0);

assign lhs_V_fu_50_p0 = A_V_Dout_A;

endmodule //example
