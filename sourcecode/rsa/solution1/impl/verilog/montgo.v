// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="montgo,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.903000,HLS_SYN_LAT=17667,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=42427,HLS_SYN_LUT=45126,HLS_VERSION=2018_3}" *)

module montgo (
        ap_clk,
        ap_rst_n,
        INPUT_ARR_TDATA,
        INPUT_ARR_TVALID,
        INPUT_ARR_TREADY,
        INPUT_ARR_TKEEP,
        INPUT_ARR_TSTRB,
        INPUT_ARR_TUSER,
        INPUT_ARR_TLAST,
        INPUT_ARR_TID,
        INPUT_ARR_TDEST,
        OUTPUT_ARR_TDATA,
        OUTPUT_ARR_TVALID,
        OUTPUT_ARR_TREADY,
        OUTPUT_ARR_TKEEP,
        OUTPUT_ARR_TSTRB,
        OUTPUT_ARR_TUSER,
        OUTPUT_ARR_TLAST,
        OUTPUT_ARR_TID,
        OUTPUT_ARR_TDEST,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 24'd1;
parameter    ap_ST_fsm_state2 = 24'd2;
parameter    ap_ST_fsm_state3 = 24'd4;
parameter    ap_ST_fsm_state4 = 24'd8;
parameter    ap_ST_fsm_state5 = 24'd16;
parameter    ap_ST_fsm_state6 = 24'd32;
parameter    ap_ST_fsm_state7 = 24'd64;
parameter    ap_ST_fsm_state8 = 24'd128;
parameter    ap_ST_fsm_state9 = 24'd256;
parameter    ap_ST_fsm_state10 = 24'd512;
parameter    ap_ST_fsm_state11 = 24'd1024;
parameter    ap_ST_fsm_state12 = 24'd2048;
parameter    ap_ST_fsm_state13 = 24'd4096;
parameter    ap_ST_fsm_state14 = 24'd8192;
parameter    ap_ST_fsm_state15 = 24'd16384;
parameter    ap_ST_fsm_state16 = 24'd32768;
parameter    ap_ST_fsm_state17 = 24'd65536;
parameter    ap_ST_fsm_state18 = 24'd131072;
parameter    ap_ST_fsm_state19 = 24'd262144;
parameter    ap_ST_fsm_state20 = 24'd524288;
parameter    ap_ST_fsm_state21 = 24'd1048576;
parameter    ap_ST_fsm_state22 = 24'd2097152;
parameter    ap_ST_fsm_state23 = 24'd4194304;
parameter    ap_ST_fsm_state24 = 24'd8388608;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 4;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [31:0] INPUT_ARR_TDATA;
input   INPUT_ARR_TVALID;
output   INPUT_ARR_TREADY;
input  [3:0] INPUT_ARR_TKEEP;
input  [3:0] INPUT_ARR_TSTRB;
input  [0:0] INPUT_ARR_TUSER;
input  [0:0] INPUT_ARR_TLAST;
input  [0:0] INPUT_ARR_TID;
input  [0:0] INPUT_ARR_TDEST;
output  [31:0] OUTPUT_ARR_TDATA;
output   OUTPUT_ARR_TVALID;
input   OUTPUT_ARR_TREADY;
output  [3:0] OUTPUT_ARR_TKEEP;
output  [3:0] OUTPUT_ARR_TSTRB;
output  [0:0] OUTPUT_ARR_TUSER;
output  [0:0] OUTPUT_ARR_TLAST;
output  [0:0] OUTPUT_ARR_TID;
output  [0:0] OUTPUT_ARR_TDEST;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
output   interrupt;

reg INPUT_ARR_TREADY;
reg OUTPUT_ARR_TVALID;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [23:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
reg    INPUT_ARR_TDATA_blk_n;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state24;
reg    OUTPUT_ARR_TDATA_blk_n;
wire   [7:0] ii_1_fu_245_p2;
reg   [7:0] ii_1_reg_787;
wire    ap_CS_fsm_state2;
wire   [0:0] tmp_3_fu_269_p2;
reg   [0:0] tmp_3_reg_792;
wire   [0:0] exitcond1_fu_239_p2;
wire   [11:0] tmp_5_fu_275_p1;
reg   [11:0] tmp_5_reg_799;
wire   [11:0] tmp_7_fu_279_p1;
reg   [11:0] tmp_7_reg_806;
wire   [11:0] tmp_12_fu_291_p2;
reg   [11:0] tmp_12_reg_811;
wire   [0:0] tmp_26_fu_297_p2;
reg   [0:0] tmp_26_reg_816;
wire   [11:0] tmp_27_fu_303_p1;
reg   [11:0] tmp_27_reg_823;
wire   [11:0] tmp_28_fu_307_p1;
reg   [11:0] tmp_28_reg_830;
wire   [11:0] tmp_33_fu_319_p2;
reg   [11:0] tmp_33_reg_835;
wire   [0:0] x0_V_fu_325_p1;
reg   [0:0] x0_V_reg_840;
wire   [11:0] tmp_11_fu_334_p3;
reg   [11:0] tmp_11_reg_845;
wire    ap_CS_fsm_state3;
wire   [11:0] tmp_32_fu_354_p3;
reg   [11:0] tmp_32_reg_855;
wire   [2047:0] grp_fu_343_p2;
reg   [2047:0] tmp_20_reg_875;
wire   [2047:0] grp_fu_363_p2;
reg   [2047:0] tmp_41_reg_890;
wire   [2047:0] grp_fu_390_p2;
reg   [2047:0] tmp_16_reg_895;
wire    ap_CS_fsm_state5;
wire   [2047:0] p_demorgan_fu_428_p2;
reg   [2047:0] p_demorgan_reg_901;
wire   [2047:0] grp_fu_407_p2;
reg   [2047:0] tmp_37_reg_907;
wire   [2047:0] p_demorgan9_fu_448_p2;
reg   [2047:0] p_demorgan9_reg_913;
wire   [2047:0] p_Result_5_fu_484_p2;
wire    ap_CS_fsm_state6;
wire   [2047:0] p_Result_6_fu_521_p2;
wire   [2049:0] p_Val2_3_cast_fu_527_p1;
reg   [2049:0] p_Val2_3_cast_reg_929;
wire    ap_CS_fsm_state7;
wire   [11:0] i_fu_541_p2;
reg   [11:0] i_reg_939;
wire   [2047:0] p_2_fu_578_p2;
reg   [2047:0] p_2_reg_944;
wire   [0:0] exitcond2_fu_535_p2;
wire   [2048:0] tmp_cast_cast_fu_584_p3;
reg   [2048:0] tmp_cast_cast_reg_949;
wire    ap_CS_fsm_state8;
wire   [2048:0] grp_fu_595_p2;
reg   [2048:0] tmp_reg_959;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state10;
reg   [2048:0] p_Result_1_reg_969;
wire    ap_CS_fsm_state11;
wire   [0:0] tmp_4_fu_623_p2;
reg   [0:0] tmp_4_reg_976;
wire    ap_CS_fsm_state13;
wire   [2048:0] grp_fu_618_p2;
reg   [2048:0] result_mont_V_1_reg_981;
wire   [2048:0] result_mont_V_fu_628_p3;
wire    ap_CS_fsm_state14;
wire   [6:0] i_1_fu_639_p2;
reg   [6:0] i_1_reg_994;
wire    ap_CS_fsm_state15;
wire   [10:0] Lo_assign_1_fu_649_p3;
reg   [10:0] Lo_assign_1_reg_999;
wire   [0:0] exitcond_fu_633_p2;
wire   [10:0] Hi_assign_2_fu_657_p2;
reg   [10:0] Hi_assign_2_reg_1004;
wire   [0:0] tmp_50_fu_663_p2;
reg   [0:0] tmp_50_reg_1009;
wire   [2049:0] tmp_58_fu_709_p3;
reg   [2049:0] tmp_58_reg_1016;
wire    ap_CS_fsm_state16;
wire   [11:0] tmp_59_fu_715_p3;
reg   [11:0] tmp_59_reg_1021;
wire   [11:0] tmp_60_fu_722_p2;
reg   [11:0] tmp_60_reg_1026;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state22;
wire   [2049:0] grp_fu_731_p2;
reg   [2049:0] tmp_63_reg_1041;
wire    ap_CS_fsm_state23;
wire   [2049:0] grp_fu_739_p2;
reg   [2049:0] tmp_64_reg_1046;
reg   [2047:0] p_Val2_2_reg_171;
reg   [2047:0] p_Val2_s_reg_183;
reg   [7:0] ii_reg_195;
reg   [2048:0] p_Val2_3_reg_206;
reg   [11:0] Hi_assign_1_reg_217;
reg   [6:0] i1_reg_228;
wire   [6:0] tmp_2_fu_251_p1;
wire   [10:0] Lo_assign_fu_255_p3;
wire   [10:0] Hi_assign_fu_263_p2;
wire   [11:0] tmp_9_fu_283_p3;
wire   [11:0] tmp_30_fu_311_p3;
wire   [11:0] tmp_8_fu_329_p2;
wire   [2047:0] grp_fu_343_p1;
wire   [11:0] tmp_29_fu_349_p2;
wire   [2047:0] grp_fu_363_p1;
wire   [15:0] p_Result_s_fu_373_p4;
wire   [2047:0] grp_fu_390_p0;
wire   [2047:0] grp_fu_390_p1;
wire   [15:0] tmp_25_fu_396_p1;
wire   [2047:0] grp_fu_407_p0;
wire   [2047:0] grp_fu_407_p1;
wire   [11:0] tmp_10_fu_413_p3;
wire   [2047:0] tmp_14_fu_418_p1;
wire   [2047:0] tmp_19_fu_422_p2;
wire   [11:0] tmp_31_fu_433_p3;
wire   [2047:0] tmp_35_fu_438_p1;
wire   [2047:0] tmp_40_fu_442_p2;
reg   [2047:0] tmp_17_fu_453_p4;
wire   [2047:0] tmp_21_fu_468_p2;
wire   [2047:0] tmp_18_fu_462_p3;
wire   [2047:0] tmp_22_fu_473_p2;
wire   [2047:0] tmp_23_fu_479_p2;
reg   [2047:0] tmp_38_fu_490_p4;
wire   [2047:0] tmp_42_fu_505_p2;
wire   [2047:0] tmp_39_fu_499_p3;
wire   [2047:0] tmp_43_fu_510_p2;
wire   [2047:0] tmp_44_fu_516_p2;
wire   [31:0] Hi_assign_1_cast2_fu_531_p1;
wire   [0:0] tmp_46_fu_547_p3;
wire   [0:0] tmp_47_fu_560_p1;
wire   [0:0] tmp_6_fu_555_p2;
wire   [2047:0] tmp_48_fu_570_p3;
wire   [0:0] u_V_fu_564_p2;
wire   [2048:0] grp_fu_595_p1;
wire   [2049:0] grp_fu_603_p1;
wire   [2049:0] grp_fu_603_p2;
wire    ap_CS_fsm_state12;
wire   [5:0] tmp_49_fu_645_p1;
wire   [11:0] tmp_51_fu_669_p1;
wire   [11:0] tmp_52_fu_672_p1;
wire   [11:0] tmp_54_fu_684_p2;
wire   [11:0] tmp_56_fu_696_p2;
reg   [2049:0] tmp_53_fu_675_p4;
wire   [11:0] tmp_55_fu_690_p2;
wire   [11:0] tmp_57_fu_702_p3;
wire   [2049:0] grp_fu_731_p1;
wire   [2049:0] grp_fu_739_p1;
wire   [2049:0] p_Result_7_fu_745_p2;
reg    grp_fu_343_ce;
reg    grp_fu_363_ce;
reg    grp_fu_390_ce;
reg    grp_fu_407_ce;
reg   [23:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 24'd1;
end

montgo_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
montgo_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

montgo_lshr_2048sbkb #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .OP( 1 ),
    .din0_WIDTH( 2048 ),
    .din1_WIDTH( 12 ),
    .dout_WIDTH( 2048 ))
montgo_lshr_2048sbkb_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(2048'd32317006071311007300714876688669951960444102669715484032130345427524655138867890893197201411522913463688717960921898019494119559150490921095088152386448283120630877367300996091750197750389652106796057638384067568276792218642619756161838094338476170470581645852036305042887575891541065808607552399123930385521914333389668342420684974786564569494856176035326322058077805659331026192708460314150258592864177116725943603718461857357598351152301645904403697613233287231227125684710820209725157101726931323469678542580656697935045997268352998638215525166389437335543602135433229604645318478604952148193555853611059596230655),
    .din1(grp_fu_343_p1),
    .ce(grp_fu_343_ce),
    .dout(grp_fu_343_p2)
);

montgo_lshr_2048sbkb #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .OP( 1 ),
    .din0_WIDTH( 2048 ),
    .din1_WIDTH( 12 ),
    .dout_WIDTH( 2048 ))
montgo_lshr_2048sbkb_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(2048'd32317006071311007300714876688669951960444102669715484032130345427524655138867890893197201411522913463688717960921898019494119559150490921095088152386448283120630877367300996091750197750389652106796057638384067568276792218642619756161838094338476170470581645852036305042887575891541065808607552399123930385521914333389668342420684974786564569494856176035326322058077805659331026192708460314150258592864177116725943603718461857357598351152301645904403697613233287231227125684710820209725157101726931323469678542580656697935045997268352998638215525166389437335543602135433229604645318478604952148193555853611059596230655),
    .din1(grp_fu_363_p1),
    .ce(grp_fu_363_ce),
    .dout(grp_fu_363_p2)
);

montgo_shl_2048nscud #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .OP( 0 ),
    .din0_WIDTH( 2048 ),
    .din1_WIDTH( 12 ),
    .dout_WIDTH( 2048 ))
montgo_shl_2048nscud_U3(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_390_p0),
    .din1(grp_fu_390_p1),
    .ce(grp_fu_390_ce),
    .dout(grp_fu_390_p2)
);

montgo_shl_2048nscud #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .OP( 0 ),
    .din0_WIDTH( 2048 ),
    .din1_WIDTH( 12 ),
    .dout_WIDTH( 2048 ))
montgo_shl_2048nscud_U4(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_407_p0),
    .din1(grp_fu_407_p1),
    .ce(grp_fu_407_ce),
    .dout(grp_fu_407_p2)
);

montgo_add_2049nsdEe #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 2049 ),
    .din1_WIDTH( 2049 ),
    .dout_WIDTH( 2049 ))
montgo_add_2049nsdEe_U5(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_cast_cast_reg_949),
    .din1(grp_fu_595_p1),
    .ce(1'b1),
    .dout(grp_fu_595_p2)
);

montgo_add_2050nseOg #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 2050 ),
    .din1_WIDTH( 2050 ),
    .dout_WIDTH( 2050 ))
montgo_add_2050nseOg_U6(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(p_Val2_3_cast_reg_929),
    .din1(grp_fu_603_p1),
    .ce(1'b1),
    .dout(grp_fu_603_p2)
);

montgo_add_2049s_fYi #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 2049 ),
    .din1_WIDTH( 2049 ),
    .dout_WIDTH( 2049 ))
montgo_add_2049s_fYi_U7(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(2049'd32317006078835396623512322728329320164946421499582704258152356147173148619233989775555964411912706243630572759887398320394519149839583614434963523445392413342372778047458192911691003377823698833704369186359992062304960575727690550765488579583383470800579423282124133882144682206719412845119074593767619483816935431551508954023667340912785267384562136641622673188271023811665523830453417033336654604123928642554270090111277081143488343772631689645016175770212129890036086659936466987238756740015293849771432657264959318135691346527680684249829223304147177288314693047911569584130064226625098182646301887275616471875599),
    .din1(p_Result_1_reg_969),
    .ce(1'b1),
    .dout(grp_fu_618_p2)
);

montgo_lshr_2050ng8j #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .OP( 1 ),
    .din0_WIDTH( 2050 ),
    .din1_WIDTH( 12 ),
    .dout_WIDTH( 2050 ))
montgo_lshr_2050ng8j_U8(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_58_reg_1016),
    .din1(grp_fu_731_p1),
    .ce(1'b1),
    .dout(grp_fu_731_p2)
);

montgo_lshr_2050shbi #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .OP( 1 ),
    .din0_WIDTH( 2050 ),
    .din1_WIDTH( 12 ),
    .dout_WIDTH( 2050 ))
montgo_lshr_2050shbi_U9(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(2050'd
    .din1(grp_fu_739_p1),
    .ce(1'b1),
    .dout(grp_fu_739_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        Hi_assign_1_reg_217 <= i_reg_939;
    end else if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_239_p2 == 1'd1))) begin
        Hi_assign_1_reg_217 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (exitcond2_fu_535_p2 == 1'd1))) begin
        i1_reg_228 <= 7'd0;
    end else if ((~((1'b0 == OUTPUT_ARR_TREADY) | (1'b0 == INPUT_ARR_TVALID)) & (1'b1 == ap_CS_fsm_state24))) begin
        i1_reg_228 <= i_1_reg_994;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ii_reg_195 <= ii_1_reg_787;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ii_reg_195 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        p_Val2_3_reg_206 <= result_mont_V_fu_628_p3;
    end else if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_239_p2 == 1'd1))) begin
        p_Val2_3_reg_206 <= 2049'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state15) & (exitcond_fu_633_p2 == 1'd0))) begin
        Hi_assign_2_reg_1004[10 : 5] <= Hi_assign_2_fu_657_p2[10 : 5];
        Lo_assign_1_reg_999[10 : 5] <= Lo_assign_1_fu_649_p3[10 : 5];
        tmp_50_reg_1009 <= tmp_50_fu_663_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        i_1_reg_994 <= i_1_fu_639_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        i_reg_939 <= i_fu_541_p2;
        p_Val2_3_cast_reg_929[2048 : 0] <= p_Val2_3_cast_fu_527_p1[2048 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ii_1_reg_787 <= ii_1_fu_245_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (exitcond2_fu_535_p2 == 1'd0))) begin
        p_2_reg_944 <= p_2_fu_578_p2;
        tmp_cast_cast_reg_949[0] <= tmp_cast_cast_fu_584_p3[0];
tmp_cast_cast_reg_949[95 : 4] <= tmp_cast_cast_fu_584_p3[95 : 4];
tmp_cast_cast_reg_949[98] <= tmp_cast_cast_fu_584_p3[98];
tmp_cast_cast_reg_949[129 : 128] <= tmp_cast_cast_fu_584_p3[129 : 128];
tmp_cast_cast_reg_949[161] <= tmp_cast_cast_fu_584_p3[161];
tmp_cast_cast_reg_949[192] <= tmp_cast_cast_fu_584_p3[192];
tmp_cast_cast_reg_949[256 : 224] <= tmp_cast_cast_fu_584_p3[256 : 224];
tmp_cast_cast_reg_949[351 : 260] <= tmp_cast_cast_fu_584_p3[351 : 260];
tmp_cast_cast_reg_949[354] <= tmp_cast_cast_fu_584_p3[354];
tmp_cast_cast_reg_949[385 : 384] <= tmp_cast_cast_fu_584_p3[385 : 384];
tmp_cast_cast_reg_949[417] <= tmp_cast_cast_fu_584_p3[417];
tmp_cast_cast_reg_949[448] <= tmp_cast_cast_fu_584_p3[448];
tmp_cast_cast_reg_949[512 : 480] <= tmp_cast_cast_fu_584_p3[512 : 480];
tmp_cast_cast_reg_949[607 : 516] <= tmp_cast_cast_fu_584_p3[607 : 516];
tmp_cast_cast_reg_949[610] <= tmp_cast_cast_fu_584_p3[610];
tmp_cast_cast_reg_949[641 : 640] <= tmp_cast_cast_fu_584_p3[641 : 640];
tmp_cast_cast_reg_949[673] <= tmp_cast_cast_fu_584_p3[673];
tmp_cast_cast_reg_949[704] <= tmp_cast_cast_fu_584_p3[704];
tmp_cast_cast_reg_949[768 : 736] <= tmp_cast_cast_fu_584_p3[768 : 736];
tmp_cast_cast_reg_949[863 : 772] <= tmp_cast_cast_fu_584_p3[863 : 772];
tmp_cast_cast_reg_949[866] <= tmp_cast_cast_fu_584_p3[866];
tmp_cast_cast_reg_949[897 : 896] <= tmp_cast_cast_fu_584_p3[897 : 896];
tmp_cast_cast_reg_949[929] <= tmp_cast_cast_fu_584_p3[929];
tmp_cast_cast_reg_949[960] <= tmp_cast_cast_fu_584_p3[960];
tmp_cast_cast_reg_949[1024 : 992] <= tmp_cast_cast_fu_584_p3[1024 : 992];
tmp_cast_cast_reg_949[1119 : 1028] <= tmp_cast_cast_fu_584_p3[1119 : 1028];
tmp_cast_cast_reg_949[1122] <= tmp_cast_cast_fu_584_p3[1122];
tmp_cast_cast_reg_949[1153 : 1152] <= tmp_cast_cast_fu_584_p3[1153 : 1152];
tmp_cast_cast_reg_949[1185] <= tmp_cast_cast_fu_584_p3[1185];
tmp_cast_cast_reg_949[1216] <= tmp_cast_cast_fu_584_p3[1216];
tmp_cast_cast_reg_949[1280 : 1248] <= tmp_cast_cast_fu_584_p3[1280 : 1248];
tmp_cast_cast_reg_949[1375 : 1284] <= tmp_cast_cast_fu_584_p3[1375 : 1284];
tmp_cast_cast_reg_949[1378] <= tmp_cast_cast_fu_584_p3[1378];
tmp_cast_cast_reg_949[1409 : 1408] <= tmp_cast_cast_fu_584_p3[1409 : 1408];
tmp_cast_cast_reg_949[1441] <= tmp_cast_cast_fu_584_p3[1441];
tmp_cast_cast_reg_949[1472] <= tmp_cast_cast_fu_584_p3[1472];
tmp_cast_cast_reg_949[1536 : 1504] <= tmp_cast_cast_fu_584_p3[1536 : 1504];
tmp_cast_cast_reg_949[1631 : 1540] <= tmp_cast_cast_fu_584_p3[1631 : 1540];
tmp_cast_cast_reg_949[1634] <= tmp_cast_cast_fu_584_p3[1634];
tmp_cast_cast_reg_949[1665 : 1664] <= tmp_cast_cast_fu_584_p3[1665 : 1664];
tmp_cast_cast_reg_949[1697] <= tmp_cast_cast_fu_584_p3[1697];
tmp_cast_cast_reg_949[1728] <= tmp_cast_cast_fu_584_p3[1728];
tmp_cast_cast_reg_949[1792 : 1760] <= tmp_cast_cast_fu_584_p3[1792 : 1760];
tmp_cast_cast_reg_949[1887 : 1796] <= tmp_cast_cast_fu_584_p3[1887 : 1796];
tmp_cast_cast_reg_949[1890] <= tmp_cast_cast_fu_584_p3[1890];
tmp_cast_cast_reg_949[1921 : 1920] <= tmp_cast_cast_fu_584_p3[1921 : 1920];
tmp_cast_cast_reg_949[1953] <= tmp_cast_cast_fu_584_p3[1953];
tmp_cast_cast_reg_949[1984] <= tmp_cast_cast_fu_584_p3[1984];
tmp_cast_cast_reg_949[2047 : 2016] <= tmp_cast_cast_fu_584_p3[2047 : 2016];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        p_Result_1_reg_969 <= {{grp_fu_603_p2[2049:1]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        p_Val2_2_reg_171 <= p_Result_6_fu_521_p2;
        p_Val2_s_reg_183 <= p_Result_5_fu_484_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        p_demorgan9_reg_913 <= p_demorgan9_fu_448_p2;
        p_demorgan_reg_901 <= p_demorgan_fu_428_p2;
        tmp_16_reg_895 <= grp_fu_390_p2;
        tmp_37_reg_907 <= grp_fu_407_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        result_mont_V_1_reg_981 <= grp_fu_618_p2;
        tmp_4_reg_976 <= tmp_4_fu_623_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        tmp_11_reg_845 <= tmp_11_fu_334_p3;
        tmp_32_reg_855 <= tmp_32_fu_354_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_239_p2 == 1'd0))) begin
        tmp_12_reg_811 <= tmp_12_fu_291_p2;
        tmp_26_reg_816 <= tmp_26_fu_297_p2;
        tmp_27_reg_823[10 : 4] <= tmp_27_fu_303_p1[10 : 4];
        tmp_28_reg_830[10 : 4] <= tmp_28_fu_307_p1[10 : 4];
        tmp_33_reg_835 <= tmp_33_fu_319_p2;
        tmp_3_reg_792 <= tmp_3_fu_269_p2;
        tmp_5_reg_799[10 : 4] <= tmp_5_fu_275_p1[10 : 4];
        tmp_7_reg_806[10 : 4] <= tmp_7_fu_279_p1[10 : 4];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == INPUT_ARR_TVALID) & (1'b1 == ap_CS_fsm_state4))) begin
        tmp_20_reg_875 <= grp_fu_343_p2;
        tmp_41_reg_890 <= grp_fu_363_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        tmp_58_reg_1016 <= tmp_58_fu_709_p3;
        tmp_59_reg_1021[0] <= tmp_59_fu_715_p3[0];
tmp_59_reg_1021[11 : 5] <= tmp_59_fu_715_p3[11 : 5];
        tmp_60_reg_1026[11 : 1] <= tmp_60_fu_722_p2[11 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        tmp_63_reg_1041 <= grp_fu_731_p2;
        tmp_64_reg_1046 <= grp_fu_739_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        tmp_reg_959 <= grp_fu_595_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_239_p2 == 1'd1))) begin
        x0_V_reg_840 <= x0_V_fu_325_p1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state4))) begin
        INPUT_ARR_TDATA_blk_n = INPUT_ARR_TVALID;
    end else begin
        INPUT_ARR_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((~((1'b0 == OUTPUT_ARR_TREADY) | (1'b0 == INPUT_ARR_TVALID)) & (1'b1 == ap_CS_fsm_state24)) | ((1'b1 == INPUT_ARR_TVALID) & (1'b1 == ap_CS_fsm_state4)))) begin
        INPUT_ARR_TREADY = 1'b1;
    end else begin
        INPUT_ARR_TREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        OUTPUT_ARR_TDATA_blk_n = OUTPUT_ARR_TREADY;
    end else begin
        OUTPUT_ARR_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b0 == OUTPUT_ARR_TREADY) | (1'b0 == INPUT_ARR_TVALID)) & (1'b1 == ap_CS_fsm_state24))) begin
        OUTPUT_ARR_TVALID = 1'b1;
    end else begin
        OUTPUT_ARR_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) & (exitcond_fu_633_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) & (exitcond_fu_633_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | ((1'b1 == INPUT_ARR_TVALID) & (1'b1 == ap_CS_fsm_state4)))) begin
        grp_fu_343_ce = 1'b1;
    end else begin
        grp_fu_343_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | ((1'b1 == INPUT_ARR_TVALID) & (1'b1 == ap_CS_fsm_state4)))) begin
        grp_fu_363_ce = 1'b1;
    end else begin
        grp_fu_363_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | ((1'b1 == INPUT_ARR_TVALID) & (1'b1 == ap_CS_fsm_state4)))) begin
        grp_fu_390_ce = 1'b1;
    end else begin
        grp_fu_390_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | ((1'b1 == INPUT_ARR_TVALID) & (1'b1 == ap_CS_fsm_state4)))) begin
        grp_fu_407_ce = 1'b1;
    end else begin
        grp_fu_407_ce = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_239_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == INPUT_ARR_TVALID) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (exitcond2_fu_535_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state15 : begin
            if (((1'b1 == ap_CS_fsm_state15) & (exitcond_fu_633_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            if ((~((1'b0 == OUTPUT_ARR_TREADY) | (1'b0 == INPUT_ARR_TVALID)) & (1'b1 == ap_CS_fsm_state24))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Hi_assign_1_cast2_fu_531_p1 = Hi_assign_1_reg_217;

assign Hi_assign_2_fu_657_p2 = (11'd31 | Lo_assign_1_fu_649_p3);

assign Hi_assign_fu_263_p2 = (11'd15 | Lo_assign_fu_255_p3);

assign Lo_assign_1_fu_649_p3 = {{tmp_49_fu_645_p1}, {5'd0}};

assign Lo_assign_fu_255_p3 = {{tmp_2_fu_251_p1}, {4'd0}};

assign OUTPUT_ARR_TDATA = p_Result_7_fu_745_p2[31:0];

assign OUTPUT_ARR_TDEST = INPUT_ARR_TDEST;

assign OUTPUT_ARR_TID = INPUT_ARR_TID;

assign OUTPUT_ARR_TKEEP = INPUT_ARR_TKEEP;

assign OUTPUT_ARR_TLAST = INPUT_ARR_TLAST;

assign OUTPUT_ARR_TSTRB = INPUT_ARR_TSTRB;

assign OUTPUT_ARR_TUSER = INPUT_ARR_TUSER;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign exitcond1_fu_239_p2 = ((ii_reg_195 == 8'd128) ? 1'b1 : 1'b0);

assign exitcond2_fu_535_p2 = ((Hi_assign_1_reg_217 == 12'd2048) ? 1'b1 : 1'b0);

assign exitcond_fu_633_p2 = ((i1_reg_228 == 7'd64) ? 1'b1 : 1'b0);

assign grp_fu_343_p1 = tmp_12_reg_811;

assign grp_fu_363_p1 = tmp_33_reg_835;

assign grp_fu_390_p0 = p_Result_s_fu_373_p4;

assign grp_fu_390_p1 = tmp_11_reg_845;

assign grp_fu_407_p0 = tmp_25_fu_396_p1;

assign grp_fu_407_p1 = tmp_32_reg_855;

assign grp_fu_595_p1 = p_2_reg_944;

assign grp_fu_603_p1 = tmp_reg_959;

assign grp_fu_731_p1 = tmp_59_reg_1021;

assign grp_fu_739_p1 = tmp_60_reg_1026;

assign i_1_fu_639_p2 = (i1_reg_228 + 7'd1);

assign i_fu_541_p2 = (Hi_assign_1_reg_217 + 12'd1);

assign ii_1_fu_245_p2 = (ii_reg_195 + 8'd1);

assign p_2_fu_578_p2 = (tmp_48_fu_570_p3 & p_Val2_s_reg_183);

assign p_Result_5_fu_484_p2 = (tmp_23_fu_479_p2 | tmp_22_fu_473_p2);

assign p_Result_6_fu_521_p2 = (tmp_44_fu_516_p2 | tmp_43_fu_510_p2);

assign p_Result_7_fu_745_p2 = (tmp_64_reg_1046 & tmp_63_reg_1041);

assign p_Result_s_fu_373_p4 = {{INPUT_ARR_TDATA[31:16]}};

assign p_Val2_3_cast_fu_527_p1 = p_Val2_3_reg_206;

assign p_demorgan9_fu_448_p2 = (tmp_41_reg_890 & tmp_40_fu_442_p2);

assign p_demorgan_fu_428_p2 = (tmp_20_reg_875 & tmp_19_fu_422_p2);

assign result_mont_V_fu_628_p3 = ((tmp_4_reg_976[0:0] === 1'b1) ? p_Result_1_reg_969 : result_mont_V_1_reg_981);

assign tmp_10_fu_413_p3 = ((tmp_3_reg_792[0:0] === 1'b1) ? tmp_7_reg_806 : tmp_5_reg_799);

assign tmp_11_fu_334_p3 = ((tmp_3_reg_792[0:0] === 1'b1) ? tmp_8_fu_329_p2 : tmp_5_reg_799);

assign tmp_12_fu_291_p2 = (tmp_9_fu_283_p3 ^ 12'd2047);

assign tmp_14_fu_418_p1 = tmp_10_fu_413_p3;

integer ap_tvar_int_0;

always @ (tmp_16_reg_895) begin
    for (ap_tvar_int_0 = 2048 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 2047 - 0) begin
            tmp_17_fu_453_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            tmp_17_fu_453_p4[ap_tvar_int_0] = tmp_16_reg_895[2047 - ap_tvar_int_0];
        end
    end
end

assign tmp_18_fu_462_p3 = ((tmp_3_reg_792[0:0] === 1'b1) ? tmp_17_fu_453_p4 : tmp_16_reg_895);

assign tmp_19_fu_422_p2 = 2048'd32317006071311007300714876688669951960444102669715484032130345427524655138867890893197201411522913463688717960921898019494119559150490921095088152386448283120630877367300996091750197750389652106796057638384067568276792218642619756161838094338476170470581645852036305042887575891541065808607552399123930385521914333389668342420684974786564569494856176035326322058077805659331026192708460314150258592864177116725943603718461857357598351152301645904403697613233287231227125684710820209725157101726931323469678542580656697935045997268352998638215525166389437335543602135433229604645318478604952148193555853611059596230655 << tmp_14_fu_418_p1;

assign tmp_21_fu_468_p2 = (p_demorgan_reg_901 ^ 2048'd32317006071311007300714876688669951960444102669715484032130345427524655138867890893197201411522913463688717960921898019494119559150490921095088152386448283120630877367300996091750197750389652106796057638384067568276792218642619756161838094338476170470581645852036305042887575891541065808607552399123930385521914333389668342420684974786564569494856176035326322058077805659331026192708460314150258592864177116725943603718461857357598351152301645904403697613233287231227125684710820209725157101726931323469678542580656697935045997268352998638215525166389437335543602135433229604645318478604952148193555853611059596230655);

assign tmp_22_fu_473_p2 = (tmp_21_fu_468_p2 & p_Val2_s_reg_183);

assign tmp_23_fu_479_p2 = (tmp_18_fu_462_p3 & p_demorgan_reg_901);

assign tmp_25_fu_396_p1 = INPUT_ARR_TDATA[15:0];

assign tmp_26_fu_297_p2 = ((Lo_assign_fu_255_p3 > Hi_assign_fu_263_p2) ? 1'b1 : 1'b0);

assign tmp_27_fu_303_p1 = Lo_assign_fu_255_p3;

assign tmp_28_fu_307_p1 = Hi_assign_fu_263_p2;

assign tmp_29_fu_349_p2 = (tmp_27_reg_823 ^ 12'd2047);

assign tmp_2_fu_251_p1 = ii_reg_195[6:0];

assign tmp_30_fu_311_p3 = ((tmp_26_fu_297_p2[0:0] === 1'b1) ? tmp_27_fu_303_p1 : tmp_28_fu_307_p1);

assign tmp_31_fu_433_p3 = ((tmp_26_reg_816[0:0] === 1'b1) ? tmp_28_reg_830 : tmp_27_reg_823);

assign tmp_32_fu_354_p3 = ((tmp_26_reg_816[0:0] === 1'b1) ? tmp_29_fu_349_p2 : tmp_27_reg_823);

assign tmp_33_fu_319_p2 = (tmp_30_fu_311_p3 ^ 12'd2047);

assign tmp_35_fu_438_p1 = tmp_31_fu_433_p3;

integer ap_tvar_int_1;

always @ (tmp_37_reg_907) begin
    for (ap_tvar_int_1 = 2048 - 1; ap_tvar_int_1 >= 0; ap_tvar_int_1 = ap_tvar_int_1 - 1) begin
        if (ap_tvar_int_1 > 2047 - 0) begin
            tmp_38_fu_490_p4[ap_tvar_int_1] = 1'b0;
        end else begin
            tmp_38_fu_490_p4[ap_tvar_int_1] = tmp_37_reg_907[2047 - ap_tvar_int_1];
        end
    end
end

assign tmp_39_fu_499_p3 = ((tmp_26_reg_816[0:0] === 1'b1) ? tmp_38_fu_490_p4 : tmp_37_reg_907);

assign tmp_3_fu_269_p2 = ((Lo_assign_fu_255_p3 > Hi_assign_fu_263_p2) ? 1'b1 : 1'b0);

assign tmp_40_fu_442_p2 = 2048'd32317006071311007300714876688669951960444102669715484032130345427524655138867890893197201411522913463688717960921898019494119559150490921095088152386448283120630877367300996091750197750389652106796057638384067568276792218642619756161838094338476170470581645852036305042887575891541065808607552399123930385521914333389668342420684974786564569494856176035326322058077805659331026192708460314150258592864177116725943603718461857357598351152301645904403697613233287231227125684710820209725157101726931323469678542580656697935045997268352998638215525166389437335543602135433229604645318478604952148193555853611059596230655 << tmp_35_fu_438_p1;

assign tmp_42_fu_505_p2 = (p_demorgan9_reg_913 ^ 2048'd32317006071311007300714876688669951960444102669715484032130345427524655138867890893197201411522913463688717960921898019494119559150490921095088152386448283120630877367300996091750197750389652106796057638384067568276792218642619756161838094338476170470581645852036305042887575891541065808607552399123930385521914333389668342420684974786564569494856176035326322058077805659331026192708460314150258592864177116725943603718461857357598351152301645904403697613233287231227125684710820209725157101726931323469678542580656697935045997268352998638215525166389437335543602135433229604645318478604952148193555853611059596230655);

assign tmp_43_fu_510_p2 = (tmp_42_fu_505_p2 & p_Val2_2_reg_171);

assign tmp_44_fu_516_p2 = (tmp_39_fu_499_p3 & p_demorgan9_reg_913);

assign tmp_46_fu_547_p3 = p_Val2_2_reg_171[Hi_assign_1_cast2_fu_531_p1];

assign tmp_47_fu_560_p1 = p_Val2_3_reg_206[0:0];

assign tmp_48_fu_570_p3 = ((tmp_46_fu_547_p3[0:0] === 1'b1) ? 2048'd32317006071311007300714876688669951960444102669715484032130345427524655138867890893197201411522913463688717960921898019494119559150490921095088152386448283120630877367300996091750197750389652106796057638384067568276792218642619756161838094338476170470581645852036305042887575891541065808607552399123930385521914333389668342420684974786564569494856176035326322058077805659331026192708460314150258592864177116725943603718461857357598351152301645904403697613233287231227125684710820209725157101726931323469678542580656697935045997268352998638215525166389437335543602135433229604645318478604952148193555853611059596230655 : 2048'd0);

assign tmp_49_fu_645_p1 = i1_reg_228[5:0];

assign tmp_4_fu_623_p2 = ((p_Result_1_reg_969 < 2049'd32317006063786617977917430649010583755941783839848263806108334707876161658501792010838438411133120683746863161956397718593719968461398227755212781327504152898888976687143799271809392122955605379887746090408143074248623861557548961558187609093568870140583868421948476203630469576362718772096030204480241287226893235227827730817702608660343871605150215429029970927884587506996528554963503594963862581604425590897617117325646633571708358531971602163791219456254444572418164709485173432211557463438568797167924427896354077734400648009025313026601827028631697382772511222954889625160572730584806113740809819946502720585713) ? 1'b1 : 1'b0);

assign tmp_50_fu_663_p2 = ((Lo_assign_1_fu_649_p3 > Hi_assign_2_fu_657_p2) ? 1'b1 : 1'b0);

assign tmp_51_fu_669_p1 = Lo_assign_1_reg_999;

assign tmp_52_fu_672_p1 = Hi_assign_2_reg_1004;

integer ap_tvar_int_2;

always @ (p_Val2_3_cast_reg_929) begin
    for (ap_tvar_int_2 = 2050 - 1; ap_tvar_int_2 >= 0; ap_tvar_int_2 = ap_tvar_int_2 - 1) begin
        if (ap_tvar_int_2 > 2049 - 0) begin
            tmp_53_fu_675_p4[ap_tvar_int_2] = 1'b0;
        end else begin
            tmp_53_fu_675_p4[ap_tvar_int_2] = p_Val2_3_cast_reg_929[2049 - ap_tvar_int_2];
        end
    end
end

assign tmp_54_fu_684_p2 = (tmp_51_fu_669_p1 - tmp_52_fu_672_p1);

assign tmp_55_fu_690_p2 = ($signed(12'd2049) - $signed(tmp_51_fu_669_p1));

assign tmp_56_fu_696_p2 = (tmp_52_fu_672_p1 - tmp_51_fu_669_p1);

assign tmp_57_fu_702_p3 = ((tmp_50_reg_1009[0:0] === 1'b1) ? tmp_54_fu_684_p2 : tmp_56_fu_696_p2);

assign tmp_58_fu_709_p3 = ((tmp_50_reg_1009[0:0] === 1'b1) ? tmp_53_fu_675_p4 : p_Val2_3_cast_reg_929);

assign tmp_59_fu_715_p3 = ((tmp_50_reg_1009[0:0] === 1'b1) ? tmp_55_fu_690_p2 : tmp_51_fu_669_p1);

assign tmp_5_fu_275_p1 = Lo_assign_fu_255_p3;

assign tmp_60_fu_722_p2 = ($signed(12'd2049) - $signed(tmp_57_fu_702_p3));

assign tmp_6_fu_555_p2 = (x0_V_reg_840 & tmp_46_fu_547_p3);

assign tmp_7_fu_279_p1 = Hi_assign_fu_263_p2;

assign tmp_8_fu_329_p2 = (tmp_5_reg_799 ^ 12'd2047);

assign tmp_9_fu_283_p3 = ((tmp_3_fu_269_p2[0:0] === 1'b1) ? tmp_5_fu_275_p1 : tmp_7_fu_279_p1);

assign tmp_cast_cast_fu_584_p3 = ((u_V_fu_564_p2[0:0] === 1'b1) ? 2049'd32317006063786617977917430649010583755941783839848263806108334707876161658501792010838438411133120683746863161956397718593719968461398227755212781327504152898888976687143799271809392122955605379887746090408143074248623861557548961558187609093568870140583868421948476203630469576362718772096030204480241287226893235227827730817702608660343871605150215429029970927884587506996528554963503594963862581604425590897617117325646633571708358531971602163791219456254444572418164709485173432211557463438568797167924427896354077734400648009025313026601827028631697382772511222954889625160572730584806113740809819946502720585713 : 2049'd0);

assign u_V_fu_564_p2 = (tmp_6_fu_555_p2 ^ tmp_47_fu_560_p1);

assign x0_V_fu_325_p1 = p_Val2_s_reg_183[0:0];

always @ (posedge ap_clk) begin
    tmp_5_reg_799[3:0] <= 4'b0000;
    tmp_5_reg_799[11] <= 1'b0;
    tmp_7_reg_806[3:0] <= 4'b1111;
    tmp_7_reg_806[11] <= 1'b0;
    tmp_27_reg_823[3:0] <= 4'b0000;
    tmp_27_reg_823[11] <= 1'b0;
    tmp_28_reg_830[3:0] <= 4'b1111;
    tmp_28_reg_830[11] <= 1'b0;
    p_Val2_3_cast_reg_929[2049] <= 1'b0;
    tmp_cast_cast_reg_949[3:1] <= 3'b000;
    tmp_cast_cast_reg_949[97:96] <= 2'b00;
    tmp_cast_cast_reg_949[127:99] <= 29'b00000000000000000000000000000;
    tmp_cast_cast_reg_949[160:130] <= 31'b0000000000000000000000000000000;
    tmp_cast_cast_reg_949[191:162] <= 30'b000000000000000000000000000000;
    tmp_cast_cast_reg_949[223:193] <= 31'b0000000000000000000000000000000;
    tmp_cast_cast_reg_949[259:257] <= 3'b000;
    tmp_cast_cast_reg_949[353:352] <= 2'b00;
    tmp_cast_cast_reg_949[383:355] <= 29'b00000000000000000000000000000;
    tmp_cast_cast_reg_949[416:386] <= 31'b0000000000000000000000000000000;
    tmp_cast_cast_reg_949[447:418] <= 30'b000000000000000000000000000000;
    tmp_cast_cast_reg_949[479:449] <= 31'b0000000000000000000000000000000;
    tmp_cast_cast_reg_949[515:513] <= 3'b000;
    tmp_cast_cast_reg_949[609:608] <= 2'b00;
    tmp_cast_cast_reg_949[639:611] <= 29'b00000000000000000000000000000;
    tmp_cast_cast_reg_949[672:642] <= 31'b0000000000000000000000000000000;
    tmp_cast_cast_reg_949[703:674] <= 30'b000000000000000000000000000000;
    tmp_cast_cast_reg_949[735:705] <= 31'b0000000000000000000000000000000;
    tmp_cast_cast_reg_949[771:769] <= 3'b000;
    tmp_cast_cast_reg_949[865:864] <= 2'b00;
    tmp_cast_cast_reg_949[895:867] <= 29'b00000000000000000000000000000;
    tmp_cast_cast_reg_949[928:898] <= 31'b0000000000000000000000000000000;
    tmp_cast_cast_reg_949[959:930] <= 30'b000000000000000000000000000000;
    tmp_cast_cast_reg_949[991:961] <= 31'b0000000000000000000000000000000;
    tmp_cast_cast_reg_949[1027:1025] <= 3'b000;
    tmp_cast_cast_reg_949[1121:1120] <= 2'b00;
    tmp_cast_cast_reg_949[1151:1123] <= 29'b00000000000000000000000000000;
    tmp_cast_cast_reg_949[1184:1154] <= 31'b0000000000000000000000000000000;
    tmp_cast_cast_reg_949[1215:1186] <= 30'b000000000000000000000000000000;
    tmp_cast_cast_reg_949[1247:1217] <= 31'b0000000000000000000000000000000;
    tmp_cast_cast_reg_949[1283:1281] <= 3'b000;
    tmp_cast_cast_reg_949[1377:1376] <= 2'b00;
    tmp_cast_cast_reg_949[1407:1379] <= 29'b00000000000000000000000000000;
    tmp_cast_cast_reg_949[1440:1410] <= 31'b0000000000000000000000000000000;
    tmp_cast_cast_reg_949[1471:1442] <= 30'b000000000000000000000000000000;
    tmp_cast_cast_reg_949[1503:1473] <= 31'b0000000000000000000000000000000;
    tmp_cast_cast_reg_949[1539:1537] <= 3'b000;
    tmp_cast_cast_reg_949[1633:1632] <= 2'b00;
    tmp_cast_cast_reg_949[1663:1635] <= 29'b00000000000000000000000000000;
    tmp_cast_cast_reg_949[1696:1666] <= 31'b0000000000000000000000000000000;
    tmp_cast_cast_reg_949[1727:1698] <= 30'b000000000000000000000000000000;
    tmp_cast_cast_reg_949[1759:1729] <= 31'b0000000000000000000000000000000;
    tmp_cast_cast_reg_949[1795:1793] <= 3'b000;
    tmp_cast_cast_reg_949[1889:1888] <= 2'b00;
    tmp_cast_cast_reg_949[1919:1891] <= 29'b00000000000000000000000000000;
    tmp_cast_cast_reg_949[1952:1922] <= 31'b0000000000000000000000000000000;
    tmp_cast_cast_reg_949[1983:1954] <= 30'b000000000000000000000000000000;
    tmp_cast_cast_reg_949[2015:1985] <= 31'b0000000000000000000000000000000;
    tmp_cast_cast_reg_949[2048] <= 1'b0;
    Lo_assign_1_reg_999[4:0] <= 5'b00000;
    Hi_assign_2_reg_1004[4:0] <= 5'b11111;
    tmp_59_reg_1021[4:1] <= 4'b0000;
    tmp_60_reg_1026[0] <= 1'b0;
end

endmodule //montgo
