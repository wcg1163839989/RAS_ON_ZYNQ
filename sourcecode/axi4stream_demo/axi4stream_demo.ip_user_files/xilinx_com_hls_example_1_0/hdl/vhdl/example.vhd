-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity example is
generic (
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 4;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32 );
port (
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    interrupt : OUT STD_LOGIC;
    INPUT_ARR_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    INPUT_ARR_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    INPUT_ARR_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    INPUT_ARR_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    INPUT_ARR_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    INPUT_ARR_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    INPUT_ARR_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    OUTPUT_ARRR_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    OUTPUT_ARRR_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    OUTPUT_ARRR_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    OUTPUT_ARRR_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    OUTPUT_ARRR_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    OUTPUT_ARRR_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    OUTPUT_ARRR_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
    INPUT_ARR_TVALID : IN STD_LOGIC;
    INPUT_ARR_TREADY : OUT STD_LOGIC;
    OUTPUT_ARRR_TVALID : OUT STD_LOGIC;
    OUTPUT_ARRR_TREADY : IN STD_LOGIC );
end;


architecture behav of example is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "example,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=4.428688,HLS_SYN_LAT=103,HLS_SYN_TPT=52,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=594,HLS_SYN_LUT=1687,HLS_VERSION=2018_3}";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_S_AXI_WSTRB_WIDTH : INTEGER range 63 downto 0 := 4;
    constant C_S_AXI_ADDR_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_ready : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal x_V_i_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal x_V_i_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal x_V_t_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal x_V_t_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_V_i_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_V_i_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_V_t_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_V_t_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal Loop_1_proc_U0_ap_start : STD_LOGIC;
    signal Loop_1_proc_U0_ap_done : STD_LOGIC;
    signal Loop_1_proc_U0_ap_continue : STD_LOGIC;
    signal Loop_1_proc_U0_ap_idle : STD_LOGIC;
    signal Loop_1_proc_U0_ap_ready : STD_LOGIC;
    signal Loop_1_proc_U0_INPUT_ARR_TREADY : STD_LOGIC;
    signal Loop_1_proc_U0_x_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal Loop_1_proc_U0_x_V_ce0 : STD_LOGIC;
    signal Loop_1_proc_U0_x_V_we0 : STD_LOGIC;
    signal Loop_1_proc_U0_x_V_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal Loop_1_proc_U0_y_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal Loop_1_proc_U0_y_V_ce0 : STD_LOGIC;
    signal Loop_1_proc_U0_y_V_we0 : STD_LOGIC;
    signal Loop_1_proc_U0_y_V_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_channel_done_y_V : STD_LOGIC;
    signal Loop_1_proc_U0_y_V_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_y_V : STD_LOGIC := '0';
    signal ap_sync_channel_write_y_V : STD_LOGIC;
    signal ap_channel_done_x_V : STD_LOGIC;
    signal Loop_1_proc_U0_x_V_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_x_V : STD_LOGIC := '0';
    signal ap_sync_channel_write_x_V : STD_LOGIC;
    signal Loop_add_loop_proc_U0_ap_start : STD_LOGIC;
    signal Loop_add_loop_proc_U0_ap_done : STD_LOGIC;
    signal Loop_add_loop_proc_U0_ap_continue : STD_LOGIC;
    signal Loop_add_loop_proc_U0_ap_idle : STD_LOGIC;
    signal Loop_add_loop_proc_U0_ap_ready : STD_LOGIC;
    signal Loop_add_loop_proc_U0_y_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal Loop_add_loop_proc_U0_y_V_ce0 : STD_LOGIC;
    signal Loop_add_loop_proc_U0_y_V_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal Loop_add_loop_proc_U0_y_V_ce1 : STD_LOGIC;
    signal Loop_add_loop_proc_U0_x_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal Loop_add_loop_proc_U0_x_V_ce0 : STD_LOGIC;
    signal Loop_add_loop_proc_U0_x_V_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal Loop_add_loop_proc_U0_x_V_ce1 : STD_LOGIC;
    signal Loop_add_loop_proc_U0_OUTPUT_ARRR_TDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal Loop_add_loop_proc_U0_OUTPUT_ARRR_TVALID : STD_LOGIC;
    signal Loop_add_loop_proc_U0_INPUT_ARR_TREADY : STD_LOGIC;
    signal Loop_add_loop_proc_U0_OUTPUT_ARRR_TKEEP : STD_LOGIC_VECTOR (3 downto 0);
    signal Loop_add_loop_proc_U0_OUTPUT_ARRR_TSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal Loop_add_loop_proc_U0_OUTPUT_ARRR_TUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal Loop_add_loop_proc_U0_OUTPUT_ARRR_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal Loop_add_loop_proc_U0_OUTPUT_ARRR_TID : STD_LOGIC_VECTOR (0 downto 0);
    signal Loop_add_loop_proc_U0_OUTPUT_ARRR_TDEST : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sync_continue : STD_LOGIC;
    signal x_V_i_full_n : STD_LOGIC;
    signal x_V_t_empty_n : STD_LOGIC;
    signal x_V_t_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal x_V_t_we1 : STD_LOGIC;
    signal y_V_i_full_n : STD_LOGIC;
    signal y_V_t_empty_n : STD_LOGIC;
    signal y_V_t_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_V_t_we1 : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal ap_sync_reg_Loop_1_proc_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_Loop_1_proc_U0_ap_ready : STD_LOGIC;
    signal Loop_1_proc_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal ap_sync_reg_Loop_add_loop_proc_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_Loop_add_loop_proc_U0_ap_ready : STD_LOGIC;
    signal Loop_add_loop_proc_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal Loop_1_proc_U0_start_full_n : STD_LOGIC;
    signal Loop_1_proc_U0_start_write : STD_LOGIC;
    signal Loop_add_loop_proc_U0_start_full_n : STD_LOGIC;
    signal Loop_add_loop_proc_U0_start_write : STD_LOGIC;

    component Loop_1_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        INPUT_ARR_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        INPUT_ARR_TVALID : IN STD_LOGIC;
        INPUT_ARR_TREADY : OUT STD_LOGIC;
        x_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        x_V_ce0 : OUT STD_LOGIC;
        x_V_we0 : OUT STD_LOGIC;
        x_V_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        y_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        y_V_ce0 : OUT STD_LOGIC;
        y_V_we0 : OUT STD_LOGIC;
        y_V_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component Loop_add_loop_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        OUTPUT_ARRR_TREADY : IN STD_LOGIC;
        y_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        y_V_ce0 : OUT STD_LOGIC;
        y_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        y_V_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        y_V_ce1 : OUT STD_LOGIC;
        y_V_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
        x_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        x_V_ce0 : OUT STD_LOGIC;
        x_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        x_V_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        x_V_ce1 : OUT STD_LOGIC;
        x_V_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
        OUTPUT_ARRR_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        OUTPUT_ARRR_TVALID : OUT STD_LOGIC;
        INPUT_ARR_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
        INPUT_ARR_TVALID : IN STD_LOGIC;
        INPUT_ARR_TREADY : OUT STD_LOGIC;
        OUTPUT_ARRR_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
        INPUT_ARR_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        OUTPUT_ARRR_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        INPUT_ARR_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        OUTPUT_ARRR_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        INPUT_ARR_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        OUTPUT_ARRR_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
        INPUT_ARR_TID : IN STD_LOGIC_VECTOR (0 downto 0);
        OUTPUT_ARRR_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
        INPUT_ARR_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
        OUTPUT_ARRR_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component example_x_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        i_address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        i_ce0 : IN STD_LOGIC;
        i_we0 : IN STD_LOGIC;
        i_d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        i_q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        i_address1 : IN STD_LOGIC_VECTOR (5 downto 0);
        i_ce1 : IN STD_LOGIC;
        i_q1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        t_address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        t_ce0 : IN STD_LOGIC;
        t_we0 : IN STD_LOGIC;
        t_d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        t_q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        t_address1 : IN STD_LOGIC_VECTOR (5 downto 0);
        t_ce1 : IN STD_LOGIC;
        t_q1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        i_ce : IN STD_LOGIC;
        t_ce : IN STD_LOGIC;
        i_full_n : OUT STD_LOGIC;
        i_write : IN STD_LOGIC;
        t_empty_n : OUT STD_LOGIC;
        t_read : IN STD_LOGIC );
    end component;


    component example_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;



begin
    example_AXILiteS_s_axi_U : component example_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    x_V_U : component example_x_V
    generic map (
        DataWidth => 16,
        AddressRange => 50,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        i_address0 => Loop_1_proc_U0_x_V_address0,
        i_ce0 => Loop_1_proc_U0_x_V_ce0,
        i_we0 => Loop_1_proc_U0_x_V_we0,
        i_d0 => Loop_1_proc_U0_x_V_d0,
        i_q0 => x_V_i_q0,
        i_address1 => ap_const_lv6_0,
        i_ce1 => ap_const_logic_0,
        i_q1 => x_V_i_q1,
        t_address0 => Loop_add_loop_proc_U0_x_V_address0,
        t_ce0 => Loop_add_loop_proc_U0_x_V_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv16_0,
        t_q0 => x_V_t_q0,
        t_address1 => Loop_add_loop_proc_U0_x_V_address1,
        t_ce1 => Loop_add_loop_proc_U0_x_V_ce1,
        t_q1 => x_V_t_q1,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => x_V_i_full_n,
        i_write => ap_channel_done_x_V,
        t_empty_n => x_V_t_empty_n,
        t_read => Loop_add_loop_proc_U0_ap_ready);

    y_V_U : component example_x_V
    generic map (
        DataWidth => 16,
        AddressRange => 50,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        i_address0 => Loop_1_proc_U0_y_V_address0,
        i_ce0 => Loop_1_proc_U0_y_V_ce0,
        i_we0 => Loop_1_proc_U0_y_V_we0,
        i_d0 => Loop_1_proc_U0_y_V_d0,
        i_q0 => y_V_i_q0,
        i_address1 => ap_const_lv6_0,
        i_ce1 => ap_const_logic_0,
        i_q1 => y_V_i_q1,
        t_address0 => Loop_add_loop_proc_U0_y_V_address0,
        t_ce0 => Loop_add_loop_proc_U0_y_V_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv16_0,
        t_q0 => y_V_t_q0,
        t_address1 => Loop_add_loop_proc_U0_y_V_address1,
        t_ce1 => Loop_add_loop_proc_U0_y_V_ce1,
        t_q1 => y_V_t_q1,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => y_V_i_full_n,
        i_write => ap_channel_done_y_V,
        t_empty_n => y_V_t_empty_n,
        t_read => Loop_add_loop_proc_U0_ap_ready);

    Loop_1_proc_U0 : component Loop_1_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Loop_1_proc_U0_ap_start,
        ap_done => Loop_1_proc_U0_ap_done,
        ap_continue => Loop_1_proc_U0_ap_continue,
        ap_idle => Loop_1_proc_U0_ap_idle,
        ap_ready => Loop_1_proc_U0_ap_ready,
        INPUT_ARR_TDATA => INPUT_ARR_TDATA,
        INPUT_ARR_TVALID => INPUT_ARR_TVALID,
        INPUT_ARR_TREADY => Loop_1_proc_U0_INPUT_ARR_TREADY,
        x_V_address0 => Loop_1_proc_U0_x_V_address0,
        x_V_ce0 => Loop_1_proc_U0_x_V_ce0,
        x_V_we0 => Loop_1_proc_U0_x_V_we0,
        x_V_d0 => Loop_1_proc_U0_x_V_d0,
        y_V_address0 => Loop_1_proc_U0_y_V_address0,
        y_V_ce0 => Loop_1_proc_U0_y_V_ce0,
        y_V_we0 => Loop_1_proc_U0_y_V_we0,
        y_V_d0 => Loop_1_proc_U0_y_V_d0);

    Loop_add_loop_proc_U0 : component Loop_add_loop_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Loop_add_loop_proc_U0_ap_start,
        ap_done => Loop_add_loop_proc_U0_ap_done,
        ap_continue => Loop_add_loop_proc_U0_ap_continue,
        ap_idle => Loop_add_loop_proc_U0_ap_idle,
        ap_ready => Loop_add_loop_proc_U0_ap_ready,
        OUTPUT_ARRR_TREADY => OUTPUT_ARRR_TREADY,
        y_V_address0 => Loop_add_loop_proc_U0_y_V_address0,
        y_V_ce0 => Loop_add_loop_proc_U0_y_V_ce0,
        y_V_q0 => y_V_t_q0,
        y_V_address1 => Loop_add_loop_proc_U0_y_V_address1,
        y_V_ce1 => Loop_add_loop_proc_U0_y_V_ce1,
        y_V_q1 => y_V_t_q1,
        x_V_address0 => Loop_add_loop_proc_U0_x_V_address0,
        x_V_ce0 => Loop_add_loop_proc_U0_x_V_ce0,
        x_V_q0 => x_V_t_q0,
        x_V_address1 => Loop_add_loop_proc_U0_x_V_address1,
        x_V_ce1 => Loop_add_loop_proc_U0_x_V_ce1,
        x_V_q1 => x_V_t_q1,
        OUTPUT_ARRR_TDATA => Loop_add_loop_proc_U0_OUTPUT_ARRR_TDATA,
        OUTPUT_ARRR_TVALID => Loop_add_loop_proc_U0_OUTPUT_ARRR_TVALID,
        INPUT_ARR_TKEEP => INPUT_ARR_TKEEP,
        INPUT_ARR_TVALID => INPUT_ARR_TVALID,
        INPUT_ARR_TREADY => Loop_add_loop_proc_U0_INPUT_ARR_TREADY,
        OUTPUT_ARRR_TKEEP => Loop_add_loop_proc_U0_OUTPUT_ARRR_TKEEP,
        INPUT_ARR_TSTRB => INPUT_ARR_TSTRB,
        OUTPUT_ARRR_TSTRB => Loop_add_loop_proc_U0_OUTPUT_ARRR_TSTRB,
        INPUT_ARR_TUSER => INPUT_ARR_TUSER,
        OUTPUT_ARRR_TUSER => Loop_add_loop_proc_U0_OUTPUT_ARRR_TUSER,
        INPUT_ARR_TLAST => INPUT_ARR_TLAST,
        OUTPUT_ARRR_TLAST => Loop_add_loop_proc_U0_OUTPUT_ARRR_TLAST,
        INPUT_ARR_TID => INPUT_ARR_TID,
        OUTPUT_ARRR_TID => Loop_add_loop_proc_U0_OUTPUT_ARRR_TID,
        INPUT_ARR_TDEST => INPUT_ARR_TDEST,
        OUTPUT_ARRR_TDEST => Loop_add_loop_proc_U0_OUTPUT_ARRR_TDEST);





    ap_sync_reg_Loop_1_proc_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_Loop_1_proc_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_Loop_1_proc_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_Loop_1_proc_U0_ap_ready <= ap_sync_Loop_1_proc_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_Loop_add_loop_proc_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_Loop_add_loop_proc_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_Loop_add_loop_proc_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_Loop_add_loop_proc_U0_ap_ready <= ap_sync_Loop_add_loop_proc_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_x_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_x_V <= ap_const_logic_0;
            else
                if (((Loop_1_proc_U0_ap_done and Loop_1_proc_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_x_V <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_x_V <= ap_sync_channel_write_x_V;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_y_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_y_V <= ap_const_logic_0;
            else
                if (((Loop_1_proc_U0_ap_done and Loop_1_proc_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_y_V <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_y_V <= ap_sync_channel_write_y_V;
                end if; 
            end if;
        end if;
    end process;


    Loop_1_proc_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_sync_ready = ap_const_logic_1) and (ap_const_logic_0 = Loop_1_proc_U0_ap_ready))) then 
                Loop_1_proc_U0_ap_ready_count <= std_logic_vector(unsigned(Loop_1_proc_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((ap_const_logic_1 = Loop_1_proc_U0_ap_ready) and (ap_sync_ready = ap_const_logic_0))) then 
                Loop_1_proc_U0_ap_ready_count <= std_logic_vector(unsigned(Loop_1_proc_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;

    Loop_add_loop_proc_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_sync_ready = ap_const_logic_1) and (ap_const_logic_0 = Loop_add_loop_proc_U0_ap_ready))) then 
                Loop_add_loop_proc_U0_ap_ready_count <= std_logic_vector(unsigned(Loop_add_loop_proc_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((ap_const_logic_1 = Loop_add_loop_proc_U0_ap_ready) and (ap_sync_ready = ap_const_logic_0))) then 
                Loop_add_loop_proc_U0_ap_ready_count <= std_logic_vector(unsigned(Loop_add_loop_proc_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;
    INPUT_ARR_TREADY <= Loop_add_loop_proc_U0_INPUT_ARR_TREADY;
    Loop_1_proc_U0_ap_continue <= (ap_sync_channel_write_y_V and ap_sync_channel_write_x_V);
    Loop_1_proc_U0_ap_start <= ((ap_sync_reg_Loop_1_proc_U0_ap_ready xor ap_const_logic_1) and ap_start);
    Loop_1_proc_U0_start_full_n <= ap_const_logic_1;
    Loop_1_proc_U0_start_write <= ap_const_logic_0;
    Loop_1_proc_U0_x_V_full_n <= x_V_i_full_n;
    Loop_1_proc_U0_y_V_full_n <= y_V_i_full_n;
    Loop_add_loop_proc_U0_ap_continue <= ap_const_logic_1;
    Loop_add_loop_proc_U0_ap_start <= (y_V_t_empty_n and x_V_t_empty_n and (ap_sync_reg_Loop_add_loop_proc_U0_ap_ready xor ap_const_logic_1) and ap_start);
    Loop_add_loop_proc_U0_start_full_n <= ap_const_logic_1;
    Loop_add_loop_proc_U0_start_write <= ap_const_logic_0;
    OUTPUT_ARRR_TDATA <= Loop_add_loop_proc_U0_OUTPUT_ARRR_TDATA;
    OUTPUT_ARRR_TDEST <= Loop_add_loop_proc_U0_OUTPUT_ARRR_TDEST;
    OUTPUT_ARRR_TID <= Loop_add_loop_proc_U0_OUTPUT_ARRR_TID;
    OUTPUT_ARRR_TKEEP <= Loop_add_loop_proc_U0_OUTPUT_ARRR_TKEEP;
    OUTPUT_ARRR_TLAST <= Loop_add_loop_proc_U0_OUTPUT_ARRR_TLAST;
    OUTPUT_ARRR_TSTRB <= Loop_add_loop_proc_U0_OUTPUT_ARRR_TSTRB;
    OUTPUT_ARRR_TUSER <= Loop_add_loop_proc_U0_OUTPUT_ARRR_TUSER;
    OUTPUT_ARRR_TVALID <= Loop_add_loop_proc_U0_OUTPUT_ARRR_TVALID;
    ap_channel_done_x_V <= ((ap_sync_reg_channel_write_x_V xor ap_const_logic_1) and Loop_1_proc_U0_ap_done);
    ap_channel_done_y_V <= ((ap_sync_reg_channel_write_y_V xor ap_const_logic_1) and Loop_1_proc_U0_ap_done);
    ap_done <= Loop_add_loop_proc_U0_ap_done;
    ap_idle <= ((y_V_t_empty_n xor ap_const_logic_1) and (x_V_t_empty_n xor ap_const_logic_1) and Loop_add_loop_proc_U0_ap_idle and Loop_1_proc_U0_ap_idle);
    ap_ready <= ap_sync_ready;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_Loop_1_proc_U0_ap_ready <= (ap_sync_reg_Loop_1_proc_U0_ap_ready or Loop_1_proc_U0_ap_ready);
    ap_sync_Loop_add_loop_proc_U0_ap_ready <= (ap_sync_reg_Loop_add_loop_proc_U0_ap_ready or Loop_add_loop_proc_U0_ap_ready);
    ap_sync_channel_write_x_V <= ((ap_channel_done_x_V and Loop_1_proc_U0_x_V_full_n) or ap_sync_reg_channel_write_x_V);
    ap_sync_channel_write_y_V <= ((ap_channel_done_y_V and Loop_1_proc_U0_y_V_full_n) or ap_sync_reg_channel_write_y_V);
    ap_sync_continue <= ap_const_logic_1;
    ap_sync_done <= Loop_add_loop_proc_U0_ap_done;
    ap_sync_ready <= (ap_sync_Loop_add_loop_proc_U0_ap_ready and ap_sync_Loop_1_proc_U0_ap_ready);
    x_V_t_d1 <= ap_const_lv16_0;
    x_V_t_we1 <= ap_const_logic_0;
    y_V_t_d1 <= ap_const_lv16_0;
    y_V_t_we1 <= ap_const_logic_0;
end behav;
