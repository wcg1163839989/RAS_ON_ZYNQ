-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Loop_1_proc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    INPUT_ARR_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    INPUT_ARR_TVALID : IN STD_LOGIC;
    INPUT_ARR_TREADY : OUT STD_LOGIC;
    x_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    x_V_ce0 : OUT STD_LOGIC;
    x_V_we0 : OUT STD_LOGIC;
    x_V_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    y_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    y_V_ce0 : OUT STD_LOGIC;
    y_V_we0 : OUT STD_LOGIC;
    y_V_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of Loop_1_proc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv6_32 : STD_LOGIC_VECTOR (5 downto 0) := "110010";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal INPUT_ARR_data_V_0_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal INPUT_ARR_data_V_0_vld_in : STD_LOGIC;
    signal INPUT_ARR_data_V_0_vld_out : STD_LOGIC;
    signal INPUT_ARR_data_V_0_ack_in : STD_LOGIC;
    signal INPUT_ARR_data_V_0_ack_out : STD_LOGIC;
    signal INPUT_ARR_data_V_0_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal INPUT_ARR_data_V_0_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal INPUT_ARR_data_V_0_sel_rd : STD_LOGIC := '0';
    signal INPUT_ARR_data_V_0_sel_wr : STD_LOGIC := '0';
    signal INPUT_ARR_data_V_0_sel : STD_LOGIC;
    signal INPUT_ARR_data_V_0_load_A : STD_LOGIC;
    signal INPUT_ARR_data_V_0_load_B : STD_LOGIC;
    signal INPUT_ARR_data_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal INPUT_ARR_data_V_0_state_cmp_full : STD_LOGIC;
    signal INPUT_ARR_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal exitcond1_i_fu_83_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_fu_89_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_state2 : BOOLEAN;
    signal j_i_reg_72 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal tmp_i_fu_95_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);


begin




    INPUT_ARR_data_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                INPUT_ARR_data_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = INPUT_ARR_data_V_0_ack_out) and (ap_const_logic_1 = INPUT_ARR_data_V_0_vld_out))) then 
                                        INPUT_ARR_data_V_0_sel_rd <= not(INPUT_ARR_data_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    INPUT_ARR_data_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                INPUT_ARR_data_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = INPUT_ARR_data_V_0_ack_in) and (ap_const_logic_1 = INPUT_ARR_data_V_0_vld_in))) then 
                                        INPUT_ARR_data_V_0_sel_wr <= not(INPUT_ARR_data_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    INPUT_ARR_data_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                INPUT_ARR_data_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = INPUT_ARR_data_V_0_state) and (ap_const_logic_0 = INPUT_ARR_data_V_0_vld_in)) or ((ap_const_lv2_3 = INPUT_ARR_data_V_0_state) and (ap_const_logic_0 = INPUT_ARR_data_V_0_vld_in) and (ap_const_logic_1 = INPUT_ARR_data_V_0_ack_out)))) then 
                    INPUT_ARR_data_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = INPUT_ARR_data_V_0_state) and (ap_const_logic_0 = INPUT_ARR_data_V_0_ack_out)) or ((ap_const_lv2_3 = INPUT_ARR_data_V_0_state) and (ap_const_logic_0 = INPUT_ARR_data_V_0_ack_out) and (ap_const_logic_1 = INPUT_ARR_data_V_0_vld_in)))) then 
                    INPUT_ARR_data_V_0_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = INPUT_ARR_data_V_0_vld_in) and (ap_const_logic_1 = INPUT_ARR_data_V_0_ack_out))) and not(((ap_const_logic_0 = INPUT_ARR_data_V_0_ack_out) and (ap_const_logic_1 = INPUT_ARR_data_V_0_vld_in))) and (ap_const_lv2_3 = INPUT_ARR_data_V_0_state)) or ((ap_const_lv2_1 = INPUT_ARR_data_V_0_state) and (ap_const_logic_1 = INPUT_ARR_data_V_0_ack_out)) or ((ap_const_lv2_2 = INPUT_ARR_data_V_0_state) and (ap_const_logic_1 = INPUT_ARR_data_V_0_vld_in)))) then 
                    INPUT_ARR_data_V_0_state <= ap_const_lv2_3;
                else 
                    INPUT_ARR_data_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not(((exitcond1_i_fu_83_p2 = ap_const_lv1_0) and (ap_const_logic_0 = INPUT_ARR_data_V_0_vld_out))) and (exitcond1_i_fu_83_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    j_i_reg_72_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                j_i_reg_72 <= ap_const_lv6_0;
            elsif ((not(((exitcond1_i_fu_83_p2 = ap_const_lv1_0) and (ap_const_logic_0 = INPUT_ARR_data_V_0_vld_out))) and (exitcond1_i_fu_83_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_i_reg_72 <= j_fu_89_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = INPUT_ARR_data_V_0_load_A)) then
                INPUT_ARR_data_V_0_payload_A <= INPUT_ARR_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = INPUT_ARR_data_V_0_load_B)) then
                INPUT_ARR_data_V_0_payload_B <= INPUT_ARR_TDATA;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, INPUT_ARR_data_V_0_vld_out, ap_CS_fsm_state2, exitcond1_i_fu_83_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not(((exitcond1_i_fu_83_p2 = ap_const_lv1_0) and (ap_const_logic_0 = INPUT_ARR_data_V_0_vld_out))) and (exitcond1_i_fu_83_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif ((not(((exitcond1_i_fu_83_p2 = ap_const_lv1_0) and (ap_const_logic_0 = INPUT_ARR_data_V_0_vld_out))) and (exitcond1_i_fu_83_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;

    INPUT_ARR_TDATA_blk_n_assign_proc : process(INPUT_ARR_data_V_0_state, ap_CS_fsm_state2, exitcond1_i_fu_83_p2)
    begin
        if (((exitcond1_i_fu_83_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            INPUT_ARR_TDATA_blk_n <= INPUT_ARR_data_V_0_state(0);
        else 
            INPUT_ARR_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    INPUT_ARR_TREADY <= INPUT_ARR_data_V_0_state(1);
    INPUT_ARR_data_V_0_ack_in <= INPUT_ARR_data_V_0_state(1);

    INPUT_ARR_data_V_0_ack_out_assign_proc : process(INPUT_ARR_data_V_0_vld_out, ap_CS_fsm_state2, exitcond1_i_fu_83_p2)
    begin
        if ((not(((exitcond1_i_fu_83_p2 = ap_const_lv1_0) and (ap_const_logic_0 = INPUT_ARR_data_V_0_vld_out))) and (exitcond1_i_fu_83_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            INPUT_ARR_data_V_0_ack_out <= ap_const_logic_1;
        else 
            INPUT_ARR_data_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    INPUT_ARR_data_V_0_data_out_assign_proc : process(INPUT_ARR_data_V_0_payload_A, INPUT_ARR_data_V_0_payload_B, INPUT_ARR_data_V_0_sel)
    begin
        if ((ap_const_logic_1 = INPUT_ARR_data_V_0_sel)) then 
            INPUT_ARR_data_V_0_data_out <= INPUT_ARR_data_V_0_payload_B;
        else 
            INPUT_ARR_data_V_0_data_out <= INPUT_ARR_data_V_0_payload_A;
        end if; 
    end process;

    INPUT_ARR_data_V_0_load_A <= (not(INPUT_ARR_data_V_0_sel_wr) and INPUT_ARR_data_V_0_state_cmp_full);
    INPUT_ARR_data_V_0_load_B <= (INPUT_ARR_data_V_0_state_cmp_full and INPUT_ARR_data_V_0_sel_wr);
    INPUT_ARR_data_V_0_sel <= INPUT_ARR_data_V_0_sel_rd;
    INPUT_ARR_data_V_0_state_cmp_full <= '0' when (INPUT_ARR_data_V_0_state = ap_const_lv2_1) else '1';
    INPUT_ARR_data_V_0_vld_in <= INPUT_ARR_TVALID;
    INPUT_ARR_data_V_0_vld_out <= INPUT_ARR_data_V_0_state(0);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state2_assign_proc : process(INPUT_ARR_data_V_0_vld_out, exitcond1_i_fu_83_p2)
    begin
                ap_block_state2 <= ((exitcond1_i_fu_83_p2 = ap_const_lv1_0) and (ap_const_logic_0 = INPUT_ARR_data_V_0_vld_out));
    end process;


    ap_done_assign_proc : process(ap_done_reg, INPUT_ARR_data_V_0_vld_out, ap_CS_fsm_state2, exitcond1_i_fu_83_p2)
    begin
        if ((not(((exitcond1_i_fu_83_p2 = ap_const_lv1_0) and (ap_const_logic_0 = INPUT_ARR_data_V_0_vld_out))) and (exitcond1_i_fu_83_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(INPUT_ARR_data_V_0_vld_out, ap_CS_fsm_state2, exitcond1_i_fu_83_p2)
    begin
        if ((not(((exitcond1_i_fu_83_p2 = ap_const_lv1_0) and (ap_const_logic_0 = INPUT_ARR_data_V_0_vld_out))) and (exitcond1_i_fu_83_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_i_fu_83_p2 <= "1" when (j_i_reg_72 = ap_const_lv6_32) else "0";
    j_fu_89_p2 <= std_logic_vector(unsigned(j_i_reg_72) + unsigned(ap_const_lv6_1));
    tmp_i_fu_95_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_i_reg_72),64));
    x_V_address0 <= tmp_i_fu_95_p1(6 - 1 downto 0);

    x_V_ce0_assign_proc : process(INPUT_ARR_data_V_0_vld_out, ap_CS_fsm_state2, exitcond1_i_fu_83_p2)
    begin
        if ((not(((exitcond1_i_fu_83_p2 = ap_const_lv1_0) and (ap_const_logic_0 = INPUT_ARR_data_V_0_vld_out))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            x_V_ce0 <= ap_const_logic_1;
        else 
            x_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    x_V_d0 <= INPUT_ARR_data_V_0_data_out(31 downto 16);

    x_V_we0_assign_proc : process(INPUT_ARR_data_V_0_vld_out, ap_CS_fsm_state2, exitcond1_i_fu_83_p2)
    begin
        if ((not(((exitcond1_i_fu_83_p2 = ap_const_lv1_0) and (ap_const_logic_0 = INPUT_ARR_data_V_0_vld_out))) and (exitcond1_i_fu_83_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            x_V_we0 <= ap_const_logic_1;
        else 
            x_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    y_V_address0 <= tmp_i_fu_95_p1(6 - 1 downto 0);

    y_V_ce0_assign_proc : process(INPUT_ARR_data_V_0_vld_out, ap_CS_fsm_state2, exitcond1_i_fu_83_p2)
    begin
        if ((not(((exitcond1_i_fu_83_p2 = ap_const_lv1_0) and (ap_const_logic_0 = INPUT_ARR_data_V_0_vld_out))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            y_V_ce0 <= ap_const_logic_1;
        else 
            y_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    y_V_d0 <= INPUT_ARR_data_V_0_data_out(16 - 1 downto 0);

    y_V_we0_assign_proc : process(INPUT_ARR_data_V_0_vld_out, ap_CS_fsm_state2, exitcond1_i_fu_83_p2)
    begin
        if ((not(((exitcond1_i_fu_83_p2 = ap_const_lv1_0) and (ap_const_logic_0 = INPUT_ARR_data_V_0_vld_out))) and (exitcond1_i_fu_83_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            y_V_we0 <= ap_const_logic_1;
        else 
            y_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
