// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Loop_add_loop_proc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        OUTPUT_ARRR_TREADY,
        y_V_address0,
        y_V_ce0,
        y_V_q0,
        y_V_address1,
        y_V_ce1,
        y_V_q1,
        x_V_address0,
        x_V_ce0,
        x_V_q0,
        x_V_address1,
        x_V_ce1,
        x_V_q1,
        OUTPUT_ARRR_TDATA,
        OUTPUT_ARRR_TVALID,
        INPUT_ARR_TKEEP,
        INPUT_ARR_TVALID,
        INPUT_ARR_TREADY,
        OUTPUT_ARRR_TKEEP,
        INPUT_ARR_TSTRB,
        OUTPUT_ARRR_TSTRB,
        INPUT_ARR_TUSER,
        OUTPUT_ARRR_TUSER,
        INPUT_ARR_TLAST,
        OUTPUT_ARRR_TLAST,
        INPUT_ARR_TID,
        OUTPUT_ARRR_TID,
        INPUT_ARR_TDEST,
        OUTPUT_ARRR_TDEST
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_pp0_stage0 = 11'd2;
parameter    ap_ST_fsm_pp0_stage1 = 11'd4;
parameter    ap_ST_fsm_pp0_stage2 = 11'd8;
parameter    ap_ST_fsm_pp0_stage3 = 11'd16;
parameter    ap_ST_fsm_pp0_stage4 = 11'd32;
parameter    ap_ST_fsm_pp0_stage5 = 11'd64;
parameter    ap_ST_fsm_pp0_stage6 = 11'd128;
parameter    ap_ST_fsm_pp0_stage7 = 11'd256;
parameter    ap_ST_fsm_pp0_stage8 = 11'd512;
parameter    ap_ST_fsm_pp0_stage9 = 11'd1024;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input   OUTPUT_ARRR_TREADY;
output  [5:0] y_V_address0;
output   y_V_ce0;
input  [15:0] y_V_q0;
output  [5:0] y_V_address1;
output   y_V_ce1;
input  [15:0] y_V_q1;
output  [5:0] x_V_address0;
output   x_V_ce0;
input  [15:0] x_V_q0;
output  [5:0] x_V_address1;
output   x_V_ce1;
input  [15:0] x_V_q1;
output  [31:0] OUTPUT_ARRR_TDATA;
output   OUTPUT_ARRR_TVALID;
input  [3:0] INPUT_ARR_TKEEP;
input   INPUT_ARR_TVALID;
output   INPUT_ARR_TREADY;
output  [3:0] OUTPUT_ARRR_TKEEP;
input  [3:0] INPUT_ARR_TSTRB;
output  [3:0] OUTPUT_ARRR_TSTRB;
input  [0:0] INPUT_ARR_TUSER;
output  [0:0] OUTPUT_ARRR_TUSER;
input  [0:0] INPUT_ARR_TLAST;
output  [0:0] OUTPUT_ARRR_TLAST;
input  [0:0] INPUT_ARR_TID;
output  [0:0] OUTPUT_ARRR_TID;
input  [0:0] INPUT_ARR_TDEST;
output  [0:0] OUTPUT_ARRR_TDEST;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[5:0] y_V_address0;
reg y_V_ce0;
reg[5:0] y_V_address1;
reg y_V_ce1;
reg[5:0] x_V_address0;
reg x_V_ce0;
reg[5:0] x_V_address1;
reg x_V_ce1;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] exitcond_fu_769_p2;
wire    ap_CS_fsm_pp0_stage9;
reg    ap_enable_reg_pp0_iter0;
wire    INPUT_ARR_dest_V_0_vld_out;
reg    ap_block_state11_pp0_stage9_iter0;
wire    OUTPUT_ARRR_dest_V_1_ack_in;
reg    ap_block_pp0_stage9_11001;
reg   [31:0] OUTPUT_ARRR_data_V_1_data_in;
reg   [31:0] OUTPUT_ARRR_data_V_1_data_out;
reg    OUTPUT_ARRR_data_V_1_vld_in;
wire    OUTPUT_ARRR_data_V_1_vld_out;
wire    OUTPUT_ARRR_data_V_1_ack_in;
wire    OUTPUT_ARRR_data_V_1_ack_out;
reg   [31:0] OUTPUT_ARRR_data_V_1_payload_A;
reg   [31:0] OUTPUT_ARRR_data_V_1_payload_B;
reg    OUTPUT_ARRR_data_V_1_sel_rd;
reg    OUTPUT_ARRR_data_V_1_sel_wr;
wire    OUTPUT_ARRR_data_V_1_sel;
wire    OUTPUT_ARRR_data_V_1_load_A;
wire    OUTPUT_ARRR_data_V_1_load_B;
reg   [1:0] OUTPUT_ARRR_data_V_1_state;
wire    OUTPUT_ARRR_data_V_1_state_cmp_full;
reg   [3:0] INPUT_ARR_keep_V_0_data_out;
wire    INPUT_ARR_keep_V_0_vld_in;
wire    INPUT_ARR_keep_V_0_vld_out;
wire    INPUT_ARR_keep_V_0_ack_in;
reg    INPUT_ARR_keep_V_0_ack_out;
reg   [3:0] INPUT_ARR_keep_V_0_payload_A;
reg   [3:0] INPUT_ARR_keep_V_0_payload_B;
reg    INPUT_ARR_keep_V_0_sel_rd;
reg    INPUT_ARR_keep_V_0_sel_wr;
wire    INPUT_ARR_keep_V_0_sel;
wire    INPUT_ARR_keep_V_0_load_A;
wire    INPUT_ARR_keep_V_0_load_B;
reg   [1:0] INPUT_ARR_keep_V_0_state;
wire    INPUT_ARR_keep_V_0_state_cmp_full;
reg   [3:0] OUTPUT_ARRR_keep_V_1_data_in;
reg   [3:0] OUTPUT_ARRR_keep_V_1_data_out;
reg    OUTPUT_ARRR_keep_V_1_vld_in;
wire    OUTPUT_ARRR_keep_V_1_vld_out;
wire    OUTPUT_ARRR_keep_V_1_ack_in;
wire    OUTPUT_ARRR_keep_V_1_ack_out;
reg   [3:0] OUTPUT_ARRR_keep_V_1_payload_A;
reg   [3:0] OUTPUT_ARRR_keep_V_1_payload_B;
reg    OUTPUT_ARRR_keep_V_1_sel_rd;
reg    OUTPUT_ARRR_keep_V_1_sel_wr;
wire    OUTPUT_ARRR_keep_V_1_sel;
wire    OUTPUT_ARRR_keep_V_1_load_A;
wire    OUTPUT_ARRR_keep_V_1_load_B;
reg   [1:0] OUTPUT_ARRR_keep_V_1_state;
wire    OUTPUT_ARRR_keep_V_1_state_cmp_full;
reg   [3:0] INPUT_ARR_strb_V_0_data_out;
wire    INPUT_ARR_strb_V_0_vld_in;
wire    INPUT_ARR_strb_V_0_vld_out;
wire    INPUT_ARR_strb_V_0_ack_in;
reg    INPUT_ARR_strb_V_0_ack_out;
reg   [3:0] INPUT_ARR_strb_V_0_payload_A;
reg   [3:0] INPUT_ARR_strb_V_0_payload_B;
reg    INPUT_ARR_strb_V_0_sel_rd;
reg    INPUT_ARR_strb_V_0_sel_wr;
wire    INPUT_ARR_strb_V_0_sel;
wire    INPUT_ARR_strb_V_0_load_A;
wire    INPUT_ARR_strb_V_0_load_B;
reg   [1:0] INPUT_ARR_strb_V_0_state;
wire    INPUT_ARR_strb_V_0_state_cmp_full;
reg   [3:0] OUTPUT_ARRR_strb_V_1_data_in;
reg   [3:0] OUTPUT_ARRR_strb_V_1_data_out;
reg    OUTPUT_ARRR_strb_V_1_vld_in;
wire    OUTPUT_ARRR_strb_V_1_vld_out;
wire    OUTPUT_ARRR_strb_V_1_ack_in;
wire    OUTPUT_ARRR_strb_V_1_ack_out;
reg   [3:0] OUTPUT_ARRR_strb_V_1_payload_A;
reg   [3:0] OUTPUT_ARRR_strb_V_1_payload_B;
reg    OUTPUT_ARRR_strb_V_1_sel_rd;
reg    OUTPUT_ARRR_strb_V_1_sel_wr;
wire    OUTPUT_ARRR_strb_V_1_sel;
wire    OUTPUT_ARRR_strb_V_1_load_A;
wire    OUTPUT_ARRR_strb_V_1_load_B;
reg   [1:0] OUTPUT_ARRR_strb_V_1_state;
wire    OUTPUT_ARRR_strb_V_1_state_cmp_full;
reg   [0:0] INPUT_ARR_user_V_0_data_out;
wire    INPUT_ARR_user_V_0_vld_in;
wire    INPUT_ARR_user_V_0_vld_out;
wire    INPUT_ARR_user_V_0_ack_in;
reg    INPUT_ARR_user_V_0_ack_out;
reg   [0:0] INPUT_ARR_user_V_0_payload_A;
reg   [0:0] INPUT_ARR_user_V_0_payload_B;
reg    INPUT_ARR_user_V_0_sel_rd;
reg    INPUT_ARR_user_V_0_sel_wr;
wire    INPUT_ARR_user_V_0_sel;
wire    INPUT_ARR_user_V_0_load_A;
wire    INPUT_ARR_user_V_0_load_B;
reg   [1:0] INPUT_ARR_user_V_0_state;
wire    INPUT_ARR_user_V_0_state_cmp_full;
reg   [0:0] OUTPUT_ARRR_user_V_1_data_in;
reg   [0:0] OUTPUT_ARRR_user_V_1_data_out;
reg    OUTPUT_ARRR_user_V_1_vld_in;
wire    OUTPUT_ARRR_user_V_1_vld_out;
wire    OUTPUT_ARRR_user_V_1_ack_in;
wire    OUTPUT_ARRR_user_V_1_ack_out;
reg   [0:0] OUTPUT_ARRR_user_V_1_payload_A;
reg   [0:0] OUTPUT_ARRR_user_V_1_payload_B;
reg    OUTPUT_ARRR_user_V_1_sel_rd;
reg    OUTPUT_ARRR_user_V_1_sel_wr;
wire    OUTPUT_ARRR_user_V_1_sel;
wire    OUTPUT_ARRR_user_V_1_load_A;
wire    OUTPUT_ARRR_user_V_1_load_B;
reg   [1:0] OUTPUT_ARRR_user_V_1_state;
wire    OUTPUT_ARRR_user_V_1_state_cmp_full;
reg   [0:0] INPUT_ARR_last_V_0_data_out;
wire    INPUT_ARR_last_V_0_vld_in;
wire    INPUT_ARR_last_V_0_vld_out;
wire    INPUT_ARR_last_V_0_ack_in;
reg    INPUT_ARR_last_V_0_ack_out;
reg   [0:0] INPUT_ARR_last_V_0_payload_A;
reg   [0:0] INPUT_ARR_last_V_0_payload_B;
reg    INPUT_ARR_last_V_0_sel_rd;
reg    INPUT_ARR_last_V_0_sel_wr;
wire    INPUT_ARR_last_V_0_sel;
wire    INPUT_ARR_last_V_0_load_A;
wire    INPUT_ARR_last_V_0_load_B;
reg   [1:0] INPUT_ARR_last_V_0_state;
wire    INPUT_ARR_last_V_0_state_cmp_full;
reg   [0:0] OUTPUT_ARRR_last_V_1_data_in;
reg   [0:0] OUTPUT_ARRR_last_V_1_data_out;
reg    OUTPUT_ARRR_last_V_1_vld_in;
wire    OUTPUT_ARRR_last_V_1_vld_out;
wire    OUTPUT_ARRR_last_V_1_ack_in;
wire    OUTPUT_ARRR_last_V_1_ack_out;
reg   [0:0] OUTPUT_ARRR_last_V_1_payload_A;
reg   [0:0] OUTPUT_ARRR_last_V_1_payload_B;
reg    OUTPUT_ARRR_last_V_1_sel_rd;
reg    OUTPUT_ARRR_last_V_1_sel_wr;
wire    OUTPUT_ARRR_last_V_1_sel;
wire    OUTPUT_ARRR_last_V_1_load_A;
wire    OUTPUT_ARRR_last_V_1_load_B;
reg   [1:0] OUTPUT_ARRR_last_V_1_state;
wire    OUTPUT_ARRR_last_V_1_state_cmp_full;
reg   [0:0] INPUT_ARR_id_V_0_data_out;
wire    INPUT_ARR_id_V_0_vld_in;
wire    INPUT_ARR_id_V_0_vld_out;
wire    INPUT_ARR_id_V_0_ack_in;
reg    INPUT_ARR_id_V_0_ack_out;
reg   [0:0] INPUT_ARR_id_V_0_payload_A;
reg   [0:0] INPUT_ARR_id_V_0_payload_B;
reg    INPUT_ARR_id_V_0_sel_rd;
reg    INPUT_ARR_id_V_0_sel_wr;
wire    INPUT_ARR_id_V_0_sel;
wire    INPUT_ARR_id_V_0_load_A;
wire    INPUT_ARR_id_V_0_load_B;
reg   [1:0] INPUT_ARR_id_V_0_state;
wire    INPUT_ARR_id_V_0_state_cmp_full;
reg   [0:0] OUTPUT_ARRR_id_V_1_data_in;
reg   [0:0] OUTPUT_ARRR_id_V_1_data_out;
reg    OUTPUT_ARRR_id_V_1_vld_in;
wire    OUTPUT_ARRR_id_V_1_vld_out;
wire    OUTPUT_ARRR_id_V_1_ack_in;
wire    OUTPUT_ARRR_id_V_1_ack_out;
reg   [0:0] OUTPUT_ARRR_id_V_1_payload_A;
reg   [0:0] OUTPUT_ARRR_id_V_1_payload_B;
reg    OUTPUT_ARRR_id_V_1_sel_rd;
reg    OUTPUT_ARRR_id_V_1_sel_wr;
wire    OUTPUT_ARRR_id_V_1_sel;
wire    OUTPUT_ARRR_id_V_1_load_A;
wire    OUTPUT_ARRR_id_V_1_load_B;
reg   [1:0] OUTPUT_ARRR_id_V_1_state;
wire    OUTPUT_ARRR_id_V_1_state_cmp_full;
reg   [0:0] INPUT_ARR_dest_V_0_data_out;
wire    INPUT_ARR_dest_V_0_vld_in;
wire    INPUT_ARR_dest_V_0_ack_in;
reg    INPUT_ARR_dest_V_0_ack_out;
reg   [0:0] INPUT_ARR_dest_V_0_payload_A;
reg   [0:0] INPUT_ARR_dest_V_0_payload_B;
reg    INPUT_ARR_dest_V_0_sel_rd;
reg    INPUT_ARR_dest_V_0_sel_wr;
wire    INPUT_ARR_dest_V_0_sel;
wire    INPUT_ARR_dest_V_0_load_A;
wire    INPUT_ARR_dest_V_0_load_B;
reg   [1:0] INPUT_ARR_dest_V_0_state;
wire    INPUT_ARR_dest_V_0_state_cmp_full;
reg   [0:0] OUTPUT_ARRR_dest_V_1_data_in;
reg   [0:0] OUTPUT_ARRR_dest_V_1_data_out;
reg    OUTPUT_ARRR_dest_V_1_vld_in;
wire    OUTPUT_ARRR_dest_V_1_vld_out;
wire    OUTPUT_ARRR_dest_V_1_ack_out;
reg   [0:0] OUTPUT_ARRR_dest_V_1_payload_A;
reg   [0:0] OUTPUT_ARRR_dest_V_1_payload_B;
reg    OUTPUT_ARRR_dest_V_1_sel_rd;
reg    OUTPUT_ARRR_dest_V_1_sel_wr;
wire    OUTPUT_ARRR_dest_V_1_sel;
wire    OUTPUT_ARRR_dest_V_1_load_A;
wire    OUTPUT_ARRR_dest_V_1_load_B;
reg   [1:0] OUTPUT_ARRR_dest_V_1_state;
wire    OUTPUT_ARRR_dest_V_1_state_cmp_full;
reg    OUTPUT_ARRR_TDATA_blk_n;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_pp0_stage3;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_pp0_stage4;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_pp0_stage5;
wire    ap_CS_fsm_pp0_stage6;
wire    ap_block_pp0_stage6;
wire    ap_CS_fsm_pp0_stage7;
wire    ap_block_pp0_stage7;
wire    ap_CS_fsm_pp0_stage8;
wire    ap_block_pp0_stage8;
wire    ap_block_pp0_stage9;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [5:0] i_reg_333;
reg   [3:0] reg_372;
reg    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state12_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
reg    ap_block_state4_pp0_stage2_iter0;
reg    ap_block_pp0_stage2_11001;
reg    ap_block_state6_pp0_stage4_iter0;
reg    ap_block_pp0_stage4_11001;
reg    ap_block_state8_pp0_stage6_iter0;
reg    ap_block_pp0_stage6_11001;
reg    ap_block_state10_pp0_stage8_iter0;
reg    ap_block_pp0_stage8_11001;
reg   [3:0] reg_377;
reg   [3:0] reg_382;
reg    ap_block_state3_pp0_stage1_iter0;
reg    ap_block_state13_pp0_stage1_iter1;
reg    ap_block_pp0_stage1_11001;
reg    ap_block_state5_pp0_stage3_iter0;
reg    ap_block_pp0_stage3_11001;
reg    ap_block_state7_pp0_stage5_iter0;
reg    ap_block_pp0_stage5_11001;
reg    ap_block_state9_pp0_stage7_iter0;
reg    ap_block_pp0_stage7_11001;
reg   [3:0] reg_387;
reg   [0:0] INPUT_ARR_dest_V_val_reg_790;
reg   [0:0] INPUT_ARR_id_V_val_reg_795;
reg   [0:0] INPUT_ARR_last_V_val_reg_800;
reg   [0:0] INPUT_ARR_user_V_val_reg_805;
wire   [31:0] tmp_3_cast_fu_432_p1;
wire   [17:0] tmp_3_1_fu_453_p2;
reg   [17:0] tmp_3_1_reg_825;
reg   [0:0] INPUT_ARR_dest_V_val_10_reg_830;
reg   [0:0] INPUT_ARR_id_V_val1_reg_835;
reg   [0:0] INPUT_ARR_last_V_val_10_reg_840;
reg   [0:0] INPUT_ARR_user_V_val_10_reg_845;
wire   [31:0] tmp_3_1_cast_fu_483_p1;
wire   [17:0] tmp_3_2_fu_503_p2;
reg   [17:0] tmp_3_2_reg_875;
reg   [0:0] INPUT_ARR_dest_V_val_11_reg_880;
reg   [0:0] INPUT_ARR_id_V_val2_reg_885;
reg   [0:0] INPUT_ARR_last_V_val_11_reg_890;
reg   [0:0] INPUT_ARR_user_V_val_11_reg_895;
wire   [17:0] tmp_3_3_fu_525_p2;
reg   [17:0] tmp_3_3_reg_900;
wire   [31:0] tmp_3_2_cast_fu_555_p1;
reg   [0:0] INPUT_ARR_dest_V_val_12_reg_930;
reg   [0:0] INPUT_ARR_id_V_val3_reg_935;
reg   [0:0] INPUT_ARR_last_V_val_12_reg_940;
reg   [0:0] INPUT_ARR_user_V_val_12_reg_945;
wire   [17:0] tmp_3_4_fu_575_p2;
reg   [17:0] tmp_3_4_reg_950;
wire   [17:0] tmp_3_5_fu_597_p2;
reg   [17:0] tmp_3_5_reg_955;
wire   [31:0] tmp_3_3_cast_fu_627_p1;
reg   [0:0] INPUT_ARR_dest_V_val_13_reg_985;
reg   [0:0] INPUT_ARR_id_V_val4_reg_990;
reg   [0:0] INPUT_ARR_last_V_val_13_reg_995;
reg   [0:0] INPUT_ARR_user_V_val_13_reg_1000;
wire   [17:0] tmp_3_6_fu_647_p2;
reg   [17:0] tmp_3_6_reg_1005;
wire   [17:0] tmp_3_7_fu_669_p2;
reg   [17:0] tmp_3_7_reg_1010;
wire   [5:0] i_1_9_fu_699_p2;
reg   [5:0] i_1_9_reg_1035;
wire   [31:0] tmp_3_4_cast_fu_705_p1;
reg   [0:0] INPUT_ARR_dest_V_val_14_reg_1046;
reg   [0:0] INPUT_ARR_id_V_val5_reg_1051;
reg   [0:0] INPUT_ARR_last_V_val_14_reg_1056;
reg   [0:0] INPUT_ARR_user_V_val_14_reg_1061;
wire   [17:0] tmp_3_8_fu_725_p2;
reg   [17:0] tmp_3_8_reg_1066;
wire   [17:0] tmp_3_9_fu_747_p2;
reg   [17:0] tmp_3_9_reg_1071;
wire   [31:0] tmp_3_5_cast_fu_753_p1;
reg   [0:0] INPUT_ARR_dest_V_val_15_reg_1081;
reg   [0:0] INPUT_ARR_id_V_val6_reg_1086;
reg   [0:0] INPUT_ARR_last_V_val_15_reg_1091;
reg   [0:0] INPUT_ARR_user_V_val_15_reg_1096;
wire   [31:0] tmp_3_6_cast_fu_757_p1;
reg   [0:0] INPUT_ARR_dest_V_val_16_reg_1106;
reg   [0:0] INPUT_ARR_id_V_val7_reg_1111;
reg   [0:0] INPUT_ARR_last_V_val_16_reg_1116;
reg   [0:0] INPUT_ARR_user_V_val_16_reg_1121;
wire   [31:0] tmp_3_7_cast_fu_761_p1;
reg   [0:0] INPUT_ARR_dest_V_val_17_reg_1131;
reg   [0:0] INPUT_ARR_id_V_val8_reg_1136;
reg   [0:0] INPUT_ARR_last_V_val_17_reg_1141;
reg   [0:0] INPUT_ARR_user_V_val_17_reg_1146;
wire   [31:0] tmp_3_8_cast_fu_765_p1;
reg   [0:0] INPUT_ARR_dest_V_val_18_reg_1156;
reg   [0:0] INPUT_ARR_id_V_val9_reg_1161;
reg   [0:0] INPUT_ARR_last_V_val_18_reg_1166;
reg   [0:0] INPUT_ARR_user_V_val_18_reg_1171;
reg   [0:0] exitcond_reg_1176;
wire   [31:0] tmp_3_9_cast_fu_774_p1;
reg    ap_enable_reg_pp0_iter0_reg;
reg    ap_block_state1;
reg    ap_block_pp0_stage9_subdone;
reg    ap_block_pp0_stage1_subdone;
reg   [5:0] ap_phi_mux_i_phi_fu_337_p6;
wire   [63:0] tmp_2_fu_392_p1;
wire   [63:0] tmp_2_1_fu_404_p1;
wire   [63:0] tmp_2_2_fu_465_p1;
wire   [63:0] tmp_2_3_fu_477_p1;
wire   [63:0] tmp_2_4_fu_537_p1;
wire   [63:0] tmp_2_5_fu_549_p1;
wire   [63:0] tmp_2_6_fu_609_p1;
wire   [63:0] tmp_2_7_fu_621_p1;
wire   [63:0] tmp_2_8_fu_681_p1;
wire   [63:0] tmp_2_9_fu_693_p1;
reg    ap_block_pp0_stage1_01001;
reg    ap_block_pp0_stage2_01001;
reg    ap_block_pp0_stage3_01001;
reg    ap_block_pp0_stage4_01001;
reg    ap_block_pp0_stage5_01001;
reg    ap_block_pp0_stage6_01001;
reg    ap_block_pp0_stage7_01001;
reg    ap_block_pp0_stage8_01001;
reg    ap_block_pp0_stage9_01001;
reg    ap_block_pp0_stage0_01001;
wire   [5:0] i_1_s_fu_398_p2;
wire   [16:0] p_s_fu_410_p3;
wire   [17:0] extLd73_cast_fu_422_p1;
wire   [17:0] p_cast_fu_418_p1;
wire   [17:0] tmp_3_fu_426_p2;
wire   [16:0] p_1_fu_437_p3;
wire   [17:0] extLd70_cast_fu_449_p1;
wire   [17:0] p_1_cast_fu_445_p1;
wire   [5:0] i_1_1_fu_459_p2;
wire   [5:0] i_1_2_fu_471_p2;
wire   [16:0] p_2_fu_487_p3;
wire   [17:0] extLd67_cast_fu_499_p1;
wire   [17:0] p_2_cast_fu_495_p1;
wire   [16:0] p_3_fu_509_p3;
wire   [17:0] extLd64_cast_fu_521_p1;
wire   [17:0] p_3_cast_fu_517_p1;
wire   [5:0] i_1_3_fu_531_p2;
wire   [5:0] i_1_4_fu_543_p2;
wire   [16:0] p_4_fu_559_p3;
wire   [17:0] extLd61_cast_fu_571_p1;
wire   [17:0] p_4_cast_fu_567_p1;
wire   [16:0] p_5_fu_581_p3;
wire   [17:0] extLd58_cast_fu_593_p1;
wire   [17:0] p_5_cast_fu_589_p1;
wire   [5:0] i_1_5_fu_603_p2;
wire   [5:0] i_1_6_fu_615_p2;
wire   [16:0] p_6_fu_631_p3;
wire   [17:0] extLd55_cast_fu_643_p1;
wire   [17:0] p_6_cast_fu_639_p1;
wire   [16:0] p_7_fu_653_p3;
wire   [17:0] extLd52_cast_fu_665_p1;
wire   [17:0] p_7_cast_fu_661_p1;
wire   [5:0] i_1_7_fu_675_p2;
wire   [5:0] i_1_8_fu_687_p2;
wire   [16:0] p_8_fu_709_p3;
wire   [17:0] extLd49_cast_fu_721_p1;
wire   [17:0] p_8_cast_fu_717_p1;
wire   [16:0] p_9_fu_731_p3;
wire   [17:0] extLd_cast_fu_743_p1;
wire   [17:0] p_9_cast_fu_739_p1;
reg   [10:0] ap_NS_fsm;
reg    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
reg    ap_block_pp0_stage2_subdone;
reg    ap_block_pp0_stage3_subdone;
reg    ap_block_pp0_stage4_subdone;
reg    ap_block_pp0_stage5_subdone;
reg    ap_block_pp0_stage6_subdone;
reg    ap_block_pp0_stage7_subdone;
reg    ap_block_pp0_stage8_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_928;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 11'd1;
#0 OUTPUT_ARRR_data_V_1_sel_rd = 1'b0;
#0 OUTPUT_ARRR_data_V_1_sel_wr = 1'b0;
#0 OUTPUT_ARRR_data_V_1_state = 2'd0;
#0 INPUT_ARR_keep_V_0_sel_rd = 1'b0;
#0 INPUT_ARR_keep_V_0_sel_wr = 1'b0;
#0 INPUT_ARR_keep_V_0_state = 2'd0;
#0 OUTPUT_ARRR_keep_V_1_sel_rd = 1'b0;
#0 OUTPUT_ARRR_keep_V_1_sel_wr = 1'b0;
#0 OUTPUT_ARRR_keep_V_1_state = 2'd0;
#0 INPUT_ARR_strb_V_0_sel_rd = 1'b0;
#0 INPUT_ARR_strb_V_0_sel_wr = 1'b0;
#0 INPUT_ARR_strb_V_0_state = 2'd0;
#0 OUTPUT_ARRR_strb_V_1_sel_rd = 1'b0;
#0 OUTPUT_ARRR_strb_V_1_sel_wr = 1'b0;
#0 OUTPUT_ARRR_strb_V_1_state = 2'd0;
#0 INPUT_ARR_user_V_0_sel_rd = 1'b0;
#0 INPUT_ARR_user_V_0_sel_wr = 1'b0;
#0 INPUT_ARR_user_V_0_state = 2'd0;
#0 OUTPUT_ARRR_user_V_1_sel_rd = 1'b0;
#0 OUTPUT_ARRR_user_V_1_sel_wr = 1'b0;
#0 OUTPUT_ARRR_user_V_1_state = 2'd0;
#0 INPUT_ARR_last_V_0_sel_rd = 1'b0;
#0 INPUT_ARR_last_V_0_sel_wr = 1'b0;
#0 INPUT_ARR_last_V_0_state = 2'd0;
#0 OUTPUT_ARRR_last_V_1_sel_rd = 1'b0;
#0 OUTPUT_ARRR_last_V_1_sel_wr = 1'b0;
#0 OUTPUT_ARRR_last_V_1_state = 2'd0;
#0 INPUT_ARR_id_V_0_sel_rd = 1'b0;
#0 INPUT_ARR_id_V_0_sel_wr = 1'b0;
#0 INPUT_ARR_id_V_0_state = 2'd0;
#0 OUTPUT_ARRR_id_V_1_sel_rd = 1'b0;
#0 OUTPUT_ARRR_id_V_1_sel_wr = 1'b0;
#0 OUTPUT_ARRR_id_V_1_state = 2'd0;
#0 INPUT_ARR_dest_V_0_sel_rd = 1'b0;
#0 INPUT_ARR_dest_V_0_sel_wr = 1'b0;
#0 INPUT_ARR_dest_V_0_state = 2'd0;
#0 OUTPUT_ARRR_dest_V_1_sel_rd = 1'b0;
#0 OUTPUT_ARRR_dest_V_1_sel_wr = 1'b0;
#0 OUTPUT_ARRR_dest_V_1_state = 2'd0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        INPUT_ARR_dest_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == INPUT_ARR_dest_V_0_ack_out) & (1'b1 == INPUT_ARR_dest_V_0_vld_out))) begin
            INPUT_ARR_dest_V_0_sel_rd <= ~INPUT_ARR_dest_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        INPUT_ARR_dest_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == INPUT_ARR_dest_V_0_ack_in) & (1'b1 == INPUT_ARR_dest_V_0_vld_in))) begin
            INPUT_ARR_dest_V_0_sel_wr <= ~INPUT_ARR_dest_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        INPUT_ARR_dest_V_0_state <= 2'd0;
    end else begin
        if ((((1'b0 == INPUT_ARR_dest_V_0_vld_in) & (2'd2 == INPUT_ARR_dest_V_0_state)) | ((1'b0 == INPUT_ARR_dest_V_0_vld_in) & (1'b1 == INPUT_ARR_dest_V_0_ack_out) & (2'd3 == INPUT_ARR_dest_V_0_state)))) begin
            INPUT_ARR_dest_V_0_state <= 2'd2;
        end else if ((((1'b0 == INPUT_ARR_dest_V_0_ack_out) & (2'd1 == INPUT_ARR_dest_V_0_state)) | ((1'b0 == INPUT_ARR_dest_V_0_ack_out) & (1'b1 == INPUT_ARR_dest_V_0_vld_in) & (2'd3 == INPUT_ARR_dest_V_0_state)))) begin
            INPUT_ARR_dest_V_0_state <= 2'd1;
        end else if (((~((1'b0 == INPUT_ARR_dest_V_0_vld_in) & (1'b1 == INPUT_ARR_dest_V_0_ack_out)) & ~((1'b0 == INPUT_ARR_dest_V_0_ack_out) & (1'b1 == INPUT_ARR_dest_V_0_vld_in)) & (2'd3 == INPUT_ARR_dest_V_0_state)) | ((1'b1 == INPUT_ARR_dest_V_0_ack_out) & (2'd1 == INPUT_ARR_dest_V_0_state)) | ((1'b1 == INPUT_ARR_dest_V_0_vld_in) & (2'd2 == INPUT_ARR_dest_V_0_state)))) begin
            INPUT_ARR_dest_V_0_state <= 2'd3;
        end else begin
            INPUT_ARR_dest_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        INPUT_ARR_id_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == INPUT_ARR_id_V_0_ack_out) & (1'b1 == INPUT_ARR_id_V_0_vld_out))) begin
            INPUT_ARR_id_V_0_sel_rd <= ~INPUT_ARR_id_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        INPUT_ARR_id_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == INPUT_ARR_id_V_0_ack_in) & (1'b1 == INPUT_ARR_id_V_0_vld_in))) begin
            INPUT_ARR_id_V_0_sel_wr <= ~INPUT_ARR_id_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        INPUT_ARR_id_V_0_state <= 2'd0;
    end else begin
        if ((((1'b0 == INPUT_ARR_id_V_0_vld_in) & (2'd2 == INPUT_ARR_id_V_0_state)) | ((1'b0 == INPUT_ARR_id_V_0_vld_in) & (1'b1 == INPUT_ARR_id_V_0_ack_out) & (2'd3 == INPUT_ARR_id_V_0_state)))) begin
            INPUT_ARR_id_V_0_state <= 2'd2;
        end else if ((((1'b0 == INPUT_ARR_id_V_0_ack_out) & (2'd1 == INPUT_ARR_id_V_0_state)) | ((1'b0 == INPUT_ARR_id_V_0_ack_out) & (1'b1 == INPUT_ARR_id_V_0_vld_in) & (2'd3 == INPUT_ARR_id_V_0_state)))) begin
            INPUT_ARR_id_V_0_state <= 2'd1;
        end else if (((~((1'b0 == INPUT_ARR_id_V_0_vld_in) & (1'b1 == INPUT_ARR_id_V_0_ack_out)) & ~((1'b0 == INPUT_ARR_id_V_0_ack_out) & (1'b1 == INPUT_ARR_id_V_0_vld_in)) & (2'd3 == INPUT_ARR_id_V_0_state)) | ((1'b1 == INPUT_ARR_id_V_0_ack_out) & (2'd1 == INPUT_ARR_id_V_0_state)) | ((1'b1 == INPUT_ARR_id_V_0_vld_in) & (2'd2 == INPUT_ARR_id_V_0_state)))) begin
            INPUT_ARR_id_V_0_state <= 2'd3;
        end else begin
            INPUT_ARR_id_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        INPUT_ARR_keep_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == INPUT_ARR_keep_V_0_ack_out) & (1'b1 == INPUT_ARR_keep_V_0_vld_out))) begin
            INPUT_ARR_keep_V_0_sel_rd <= ~INPUT_ARR_keep_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        INPUT_ARR_keep_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == INPUT_ARR_keep_V_0_ack_in) & (1'b1 == INPUT_ARR_keep_V_0_vld_in))) begin
            INPUT_ARR_keep_V_0_sel_wr <= ~INPUT_ARR_keep_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        INPUT_ARR_keep_V_0_state <= 2'd0;
    end else begin
        if ((((1'b0 == INPUT_ARR_keep_V_0_vld_in) & (2'd2 == INPUT_ARR_keep_V_0_state)) | ((1'b0 == INPUT_ARR_keep_V_0_vld_in) & (1'b1 == INPUT_ARR_keep_V_0_ack_out) & (2'd3 == INPUT_ARR_keep_V_0_state)))) begin
            INPUT_ARR_keep_V_0_state <= 2'd2;
        end else if ((((1'b0 == INPUT_ARR_keep_V_0_ack_out) & (2'd1 == INPUT_ARR_keep_V_0_state)) | ((1'b0 == INPUT_ARR_keep_V_0_ack_out) & (1'b1 == INPUT_ARR_keep_V_0_vld_in) & (2'd3 == INPUT_ARR_keep_V_0_state)))) begin
            INPUT_ARR_keep_V_0_state <= 2'd1;
        end else if (((~((1'b0 == INPUT_ARR_keep_V_0_vld_in) & (1'b1 == INPUT_ARR_keep_V_0_ack_out)) & ~((1'b0 == INPUT_ARR_keep_V_0_ack_out) & (1'b1 == INPUT_ARR_keep_V_0_vld_in)) & (2'd3 == INPUT_ARR_keep_V_0_state)) | ((1'b1 == INPUT_ARR_keep_V_0_ack_out) & (2'd1 == INPUT_ARR_keep_V_0_state)) | ((1'b1 == INPUT_ARR_keep_V_0_vld_in) & (2'd2 == INPUT_ARR_keep_V_0_state)))) begin
            INPUT_ARR_keep_V_0_state <= 2'd3;
        end else begin
            INPUT_ARR_keep_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        INPUT_ARR_last_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == INPUT_ARR_last_V_0_ack_out) & (1'b1 == INPUT_ARR_last_V_0_vld_out))) begin
            INPUT_ARR_last_V_0_sel_rd <= ~INPUT_ARR_last_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        INPUT_ARR_last_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == INPUT_ARR_last_V_0_ack_in) & (1'b1 == INPUT_ARR_last_V_0_vld_in))) begin
            INPUT_ARR_last_V_0_sel_wr <= ~INPUT_ARR_last_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        INPUT_ARR_last_V_0_state <= 2'd0;
    end else begin
        if ((((1'b0 == INPUT_ARR_last_V_0_vld_in) & (2'd2 == INPUT_ARR_last_V_0_state)) | ((1'b0 == INPUT_ARR_last_V_0_vld_in) & (1'b1 == INPUT_ARR_last_V_0_ack_out) & (2'd3 == INPUT_ARR_last_V_0_state)))) begin
            INPUT_ARR_last_V_0_state <= 2'd2;
        end else if ((((1'b0 == INPUT_ARR_last_V_0_ack_out) & (2'd1 == INPUT_ARR_last_V_0_state)) | ((1'b0 == INPUT_ARR_last_V_0_ack_out) & (1'b1 == INPUT_ARR_last_V_0_vld_in) & (2'd3 == INPUT_ARR_last_V_0_state)))) begin
            INPUT_ARR_last_V_0_state <= 2'd1;
        end else if (((~((1'b0 == INPUT_ARR_last_V_0_vld_in) & (1'b1 == INPUT_ARR_last_V_0_ack_out)) & ~((1'b0 == INPUT_ARR_last_V_0_ack_out) & (1'b1 == INPUT_ARR_last_V_0_vld_in)) & (2'd3 == INPUT_ARR_last_V_0_state)) | ((1'b1 == INPUT_ARR_last_V_0_ack_out) & (2'd1 == INPUT_ARR_last_V_0_state)) | ((1'b1 == INPUT_ARR_last_V_0_vld_in) & (2'd2 == INPUT_ARR_last_V_0_state)))) begin
            INPUT_ARR_last_V_0_state <= 2'd3;
        end else begin
            INPUT_ARR_last_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        INPUT_ARR_strb_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == INPUT_ARR_strb_V_0_ack_out) & (1'b1 == INPUT_ARR_strb_V_0_vld_out))) begin
            INPUT_ARR_strb_V_0_sel_rd <= ~INPUT_ARR_strb_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        INPUT_ARR_strb_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == INPUT_ARR_strb_V_0_ack_in) & (1'b1 == INPUT_ARR_strb_V_0_vld_in))) begin
            INPUT_ARR_strb_V_0_sel_wr <= ~INPUT_ARR_strb_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        INPUT_ARR_strb_V_0_state <= 2'd0;
    end else begin
        if ((((1'b0 == INPUT_ARR_strb_V_0_vld_in) & (2'd2 == INPUT_ARR_strb_V_0_state)) | ((1'b0 == INPUT_ARR_strb_V_0_vld_in) & (1'b1 == INPUT_ARR_strb_V_0_ack_out) & (2'd3 == INPUT_ARR_strb_V_0_state)))) begin
            INPUT_ARR_strb_V_0_state <= 2'd2;
        end else if ((((1'b0 == INPUT_ARR_strb_V_0_ack_out) & (2'd1 == INPUT_ARR_strb_V_0_state)) | ((1'b0 == INPUT_ARR_strb_V_0_ack_out) & (1'b1 == INPUT_ARR_strb_V_0_vld_in) & (2'd3 == INPUT_ARR_strb_V_0_state)))) begin
            INPUT_ARR_strb_V_0_state <= 2'd1;
        end else if (((~((1'b0 == INPUT_ARR_strb_V_0_vld_in) & (1'b1 == INPUT_ARR_strb_V_0_ack_out)) & ~((1'b0 == INPUT_ARR_strb_V_0_ack_out) & (1'b1 == INPUT_ARR_strb_V_0_vld_in)) & (2'd3 == INPUT_ARR_strb_V_0_state)) | ((1'b1 == INPUT_ARR_strb_V_0_ack_out) & (2'd1 == INPUT_ARR_strb_V_0_state)) | ((1'b1 == INPUT_ARR_strb_V_0_vld_in) & (2'd2 == INPUT_ARR_strb_V_0_state)))) begin
            INPUT_ARR_strb_V_0_state <= 2'd3;
        end else begin
            INPUT_ARR_strb_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        INPUT_ARR_user_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == INPUT_ARR_user_V_0_ack_out) & (1'b1 == INPUT_ARR_user_V_0_vld_out))) begin
            INPUT_ARR_user_V_0_sel_rd <= ~INPUT_ARR_user_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        INPUT_ARR_user_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == INPUT_ARR_user_V_0_ack_in) & (1'b1 == INPUT_ARR_user_V_0_vld_in))) begin
            INPUT_ARR_user_V_0_sel_wr <= ~INPUT_ARR_user_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        INPUT_ARR_user_V_0_state <= 2'd0;
    end else begin
        if ((((1'b0 == INPUT_ARR_user_V_0_vld_in) & (2'd2 == INPUT_ARR_user_V_0_state)) | ((1'b0 == INPUT_ARR_user_V_0_vld_in) & (1'b1 == INPUT_ARR_user_V_0_ack_out) & (2'd3 == INPUT_ARR_user_V_0_state)))) begin
            INPUT_ARR_user_V_0_state <= 2'd2;
        end else if ((((1'b0 == INPUT_ARR_user_V_0_ack_out) & (2'd1 == INPUT_ARR_user_V_0_state)) | ((1'b0 == INPUT_ARR_user_V_0_ack_out) & (1'b1 == INPUT_ARR_user_V_0_vld_in) & (2'd3 == INPUT_ARR_user_V_0_state)))) begin
            INPUT_ARR_user_V_0_state <= 2'd1;
        end else if (((~((1'b0 == INPUT_ARR_user_V_0_vld_in) & (1'b1 == INPUT_ARR_user_V_0_ack_out)) & ~((1'b0 == INPUT_ARR_user_V_0_ack_out) & (1'b1 == INPUT_ARR_user_V_0_vld_in)) & (2'd3 == INPUT_ARR_user_V_0_state)) | ((1'b1 == INPUT_ARR_user_V_0_ack_out) & (2'd1 == INPUT_ARR_user_V_0_state)) | ((1'b1 == INPUT_ARR_user_V_0_vld_in) & (2'd2 == INPUT_ARR_user_V_0_state)))) begin
            INPUT_ARR_user_V_0_state <= 2'd3;
        end else begin
            INPUT_ARR_user_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        OUTPUT_ARRR_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == OUTPUT_ARRR_data_V_1_ack_out) & (1'b1 == OUTPUT_ARRR_data_V_1_vld_out))) begin
            OUTPUT_ARRR_data_V_1_sel_rd <= ~OUTPUT_ARRR_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        OUTPUT_ARRR_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == OUTPUT_ARRR_data_V_1_ack_in) & (1'b1 == OUTPUT_ARRR_data_V_1_vld_in))) begin
            OUTPUT_ARRR_data_V_1_sel_wr <= ~OUTPUT_ARRR_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        OUTPUT_ARRR_data_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == OUTPUT_ARRR_data_V_1_state) & (1'b0 == OUTPUT_ARRR_data_V_1_vld_in)) | ((2'd3 == OUTPUT_ARRR_data_V_1_state) & (1'b0 == OUTPUT_ARRR_data_V_1_vld_in) & (1'b1 == OUTPUT_ARRR_data_V_1_ack_out)))) begin
            OUTPUT_ARRR_data_V_1_state <= 2'd2;
        end else if ((((2'd1 == OUTPUT_ARRR_data_V_1_state) & (1'b0 == OUTPUT_ARRR_data_V_1_ack_out)) | ((2'd3 == OUTPUT_ARRR_data_V_1_state) & (1'b0 == OUTPUT_ARRR_data_V_1_ack_out) & (1'b1 == OUTPUT_ARRR_data_V_1_vld_in)))) begin
            OUTPUT_ARRR_data_V_1_state <= 2'd1;
        end else if (((~((1'b0 == OUTPUT_ARRR_data_V_1_vld_in) & (1'b1 == OUTPUT_ARRR_data_V_1_ack_out)) & ~((1'b0 == OUTPUT_ARRR_data_V_1_ack_out) & (1'b1 == OUTPUT_ARRR_data_V_1_vld_in)) & (2'd3 == OUTPUT_ARRR_data_V_1_state)) | ((2'd1 == OUTPUT_ARRR_data_V_1_state) & (1'b1 == OUTPUT_ARRR_data_V_1_ack_out)) | ((2'd2 == OUTPUT_ARRR_data_V_1_state) & (1'b1 == OUTPUT_ARRR_data_V_1_vld_in)))) begin
            OUTPUT_ARRR_data_V_1_state <= 2'd3;
        end else begin
            OUTPUT_ARRR_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        OUTPUT_ARRR_dest_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == OUTPUT_ARRR_dest_V_1_ack_out) & (1'b1 == OUTPUT_ARRR_dest_V_1_vld_out))) begin
            OUTPUT_ARRR_dest_V_1_sel_rd <= ~OUTPUT_ARRR_dest_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        OUTPUT_ARRR_dest_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == OUTPUT_ARRR_dest_V_1_vld_in) & (1'b1 == OUTPUT_ARRR_dest_V_1_ack_in))) begin
            OUTPUT_ARRR_dest_V_1_sel_wr <= ~OUTPUT_ARRR_dest_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        OUTPUT_ARRR_dest_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == OUTPUT_ARRR_dest_V_1_vld_in) & (2'd2 == OUTPUT_ARRR_dest_V_1_state)) | ((1'b0 == OUTPUT_ARRR_dest_V_1_vld_in) & (1'b1 == OUTPUT_ARRR_dest_V_1_ack_out) & (2'd3 == OUTPUT_ARRR_dest_V_1_state)))) begin
            OUTPUT_ARRR_dest_V_1_state <= 2'd2;
        end else if ((((1'b0 == OUTPUT_ARRR_dest_V_1_ack_out) & (2'd1 == OUTPUT_ARRR_dest_V_1_state)) | ((1'b0 == OUTPUT_ARRR_dest_V_1_ack_out) & (1'b1 == OUTPUT_ARRR_dest_V_1_vld_in) & (2'd3 == OUTPUT_ARRR_dest_V_1_state)))) begin
            OUTPUT_ARRR_dest_V_1_state <= 2'd1;
        end else if (((~((1'b0 == OUTPUT_ARRR_dest_V_1_vld_in) & (1'b1 == OUTPUT_ARRR_dest_V_1_ack_out)) & ~((1'b0 == OUTPUT_ARRR_dest_V_1_ack_out) & (1'b1 == OUTPUT_ARRR_dest_V_1_vld_in)) & (2'd3 == OUTPUT_ARRR_dest_V_1_state)) | ((1'b1 == OUTPUT_ARRR_dest_V_1_ack_out) & (2'd1 == OUTPUT_ARRR_dest_V_1_state)) | ((1'b1 == OUTPUT_ARRR_dest_V_1_vld_in) & (2'd2 == OUTPUT_ARRR_dest_V_1_state)))) begin
            OUTPUT_ARRR_dest_V_1_state <= 2'd3;
        end else begin
            OUTPUT_ARRR_dest_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        OUTPUT_ARRR_id_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == OUTPUT_ARRR_id_V_1_ack_out) & (1'b1 == OUTPUT_ARRR_id_V_1_vld_out))) begin
            OUTPUT_ARRR_id_V_1_sel_rd <= ~OUTPUT_ARRR_id_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        OUTPUT_ARRR_id_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == OUTPUT_ARRR_id_V_1_ack_in) & (1'b1 == OUTPUT_ARRR_id_V_1_vld_in))) begin
            OUTPUT_ARRR_id_V_1_sel_wr <= ~OUTPUT_ARRR_id_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        OUTPUT_ARRR_id_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == OUTPUT_ARRR_id_V_1_vld_in) & (2'd2 == OUTPUT_ARRR_id_V_1_state)) | ((1'b0 == OUTPUT_ARRR_id_V_1_vld_in) & (1'b1 == OUTPUT_ARRR_id_V_1_ack_out) & (2'd3 == OUTPUT_ARRR_id_V_1_state)))) begin
            OUTPUT_ARRR_id_V_1_state <= 2'd2;
        end else if ((((1'b0 == OUTPUT_ARRR_id_V_1_ack_out) & (2'd1 == OUTPUT_ARRR_id_V_1_state)) | ((1'b0 == OUTPUT_ARRR_id_V_1_ack_out) & (1'b1 == OUTPUT_ARRR_id_V_1_vld_in) & (2'd3 == OUTPUT_ARRR_id_V_1_state)))) begin
            OUTPUT_ARRR_id_V_1_state <= 2'd1;
        end else if (((~((1'b0 == OUTPUT_ARRR_id_V_1_vld_in) & (1'b1 == OUTPUT_ARRR_id_V_1_ack_out)) & ~((1'b0 == OUTPUT_ARRR_id_V_1_ack_out) & (1'b1 == OUTPUT_ARRR_id_V_1_vld_in)) & (2'd3 == OUTPUT_ARRR_id_V_1_state)) | ((1'b1 == OUTPUT_ARRR_id_V_1_ack_out) & (2'd1 == OUTPUT_ARRR_id_V_1_state)) | ((1'b1 == OUTPUT_ARRR_id_V_1_vld_in) & (2'd2 == OUTPUT_ARRR_id_V_1_state)))) begin
            OUTPUT_ARRR_id_V_1_state <= 2'd3;
        end else begin
            OUTPUT_ARRR_id_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        OUTPUT_ARRR_keep_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == OUTPUT_ARRR_keep_V_1_ack_out) & (1'b1 == OUTPUT_ARRR_keep_V_1_vld_out))) begin
            OUTPUT_ARRR_keep_V_1_sel_rd <= ~OUTPUT_ARRR_keep_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        OUTPUT_ARRR_keep_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == OUTPUT_ARRR_keep_V_1_ack_in) & (1'b1 == OUTPUT_ARRR_keep_V_1_vld_in))) begin
            OUTPUT_ARRR_keep_V_1_sel_wr <= ~OUTPUT_ARRR_keep_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        OUTPUT_ARRR_keep_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == OUTPUT_ARRR_keep_V_1_vld_in) & (2'd2 == OUTPUT_ARRR_keep_V_1_state)) | ((1'b0 == OUTPUT_ARRR_keep_V_1_vld_in) & (1'b1 == OUTPUT_ARRR_keep_V_1_ack_out) & (2'd3 == OUTPUT_ARRR_keep_V_1_state)))) begin
            OUTPUT_ARRR_keep_V_1_state <= 2'd2;
        end else if ((((1'b0 == OUTPUT_ARRR_keep_V_1_ack_out) & (2'd1 == OUTPUT_ARRR_keep_V_1_state)) | ((1'b0 == OUTPUT_ARRR_keep_V_1_ack_out) & (1'b1 == OUTPUT_ARRR_keep_V_1_vld_in) & (2'd3 == OUTPUT_ARRR_keep_V_1_state)))) begin
            OUTPUT_ARRR_keep_V_1_state <= 2'd1;
        end else if (((~((1'b0 == OUTPUT_ARRR_keep_V_1_vld_in) & (1'b1 == OUTPUT_ARRR_keep_V_1_ack_out)) & ~((1'b0 == OUTPUT_ARRR_keep_V_1_ack_out) & (1'b1 == OUTPUT_ARRR_keep_V_1_vld_in)) & (2'd3 == OUTPUT_ARRR_keep_V_1_state)) | ((1'b1 == OUTPUT_ARRR_keep_V_1_ack_out) & (2'd1 == OUTPUT_ARRR_keep_V_1_state)) | ((1'b1 == OUTPUT_ARRR_keep_V_1_vld_in) & (2'd2 == OUTPUT_ARRR_keep_V_1_state)))) begin
            OUTPUT_ARRR_keep_V_1_state <= 2'd3;
        end else begin
            OUTPUT_ARRR_keep_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        OUTPUT_ARRR_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == OUTPUT_ARRR_last_V_1_ack_out) & (1'b1 == OUTPUT_ARRR_last_V_1_vld_out))) begin
            OUTPUT_ARRR_last_V_1_sel_rd <= ~OUTPUT_ARRR_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        OUTPUT_ARRR_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == OUTPUT_ARRR_last_V_1_ack_in) & (1'b1 == OUTPUT_ARRR_last_V_1_vld_in))) begin
            OUTPUT_ARRR_last_V_1_sel_wr <= ~OUTPUT_ARRR_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        OUTPUT_ARRR_last_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == OUTPUT_ARRR_last_V_1_vld_in) & (2'd2 == OUTPUT_ARRR_last_V_1_state)) | ((1'b0 == OUTPUT_ARRR_last_V_1_vld_in) & (1'b1 == OUTPUT_ARRR_last_V_1_ack_out) & (2'd3 == OUTPUT_ARRR_last_V_1_state)))) begin
            OUTPUT_ARRR_last_V_1_state <= 2'd2;
        end else if ((((1'b0 == OUTPUT_ARRR_last_V_1_ack_out) & (2'd1 == OUTPUT_ARRR_last_V_1_state)) | ((1'b0 == OUTPUT_ARRR_last_V_1_ack_out) & (1'b1 == OUTPUT_ARRR_last_V_1_vld_in) & (2'd3 == OUTPUT_ARRR_last_V_1_state)))) begin
            OUTPUT_ARRR_last_V_1_state <= 2'd1;
        end else if (((~((1'b0 == OUTPUT_ARRR_last_V_1_vld_in) & (1'b1 == OUTPUT_ARRR_last_V_1_ack_out)) & ~((1'b0 == OUTPUT_ARRR_last_V_1_ack_out) & (1'b1 == OUTPUT_ARRR_last_V_1_vld_in)) & (2'd3 == OUTPUT_ARRR_last_V_1_state)) | ((1'b1 == OUTPUT_ARRR_last_V_1_ack_out) & (2'd1 == OUTPUT_ARRR_last_V_1_state)) | ((1'b1 == OUTPUT_ARRR_last_V_1_vld_in) & (2'd2 == OUTPUT_ARRR_last_V_1_state)))) begin
            OUTPUT_ARRR_last_V_1_state <= 2'd3;
        end else begin
            OUTPUT_ARRR_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        OUTPUT_ARRR_strb_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == OUTPUT_ARRR_strb_V_1_ack_out) & (1'b1 == OUTPUT_ARRR_strb_V_1_vld_out))) begin
            OUTPUT_ARRR_strb_V_1_sel_rd <= ~OUTPUT_ARRR_strb_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        OUTPUT_ARRR_strb_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == OUTPUT_ARRR_strb_V_1_ack_in) & (1'b1 == OUTPUT_ARRR_strb_V_1_vld_in))) begin
            OUTPUT_ARRR_strb_V_1_sel_wr <= ~OUTPUT_ARRR_strb_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        OUTPUT_ARRR_strb_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == OUTPUT_ARRR_strb_V_1_vld_in) & (2'd2 == OUTPUT_ARRR_strb_V_1_state)) | ((1'b0 == OUTPUT_ARRR_strb_V_1_vld_in) & (1'b1 == OUTPUT_ARRR_strb_V_1_ack_out) & (2'd3 == OUTPUT_ARRR_strb_V_1_state)))) begin
            OUTPUT_ARRR_strb_V_1_state <= 2'd2;
        end else if ((((1'b0 == OUTPUT_ARRR_strb_V_1_ack_out) & (2'd1 == OUTPUT_ARRR_strb_V_1_state)) | ((1'b0 == OUTPUT_ARRR_strb_V_1_ack_out) & (1'b1 == OUTPUT_ARRR_strb_V_1_vld_in) & (2'd3 == OUTPUT_ARRR_strb_V_1_state)))) begin
            OUTPUT_ARRR_strb_V_1_state <= 2'd1;
        end else if (((~((1'b0 == OUTPUT_ARRR_strb_V_1_vld_in) & (1'b1 == OUTPUT_ARRR_strb_V_1_ack_out)) & ~((1'b0 == OUTPUT_ARRR_strb_V_1_ack_out) & (1'b1 == OUTPUT_ARRR_strb_V_1_vld_in)) & (2'd3 == OUTPUT_ARRR_strb_V_1_state)) | ((1'b1 == OUTPUT_ARRR_strb_V_1_ack_out) & (2'd1 == OUTPUT_ARRR_strb_V_1_state)) | ((1'b1 == OUTPUT_ARRR_strb_V_1_vld_in) & (2'd2 == OUTPUT_ARRR_strb_V_1_state)))) begin
            OUTPUT_ARRR_strb_V_1_state <= 2'd3;
        end else begin
            OUTPUT_ARRR_strb_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        OUTPUT_ARRR_user_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == OUTPUT_ARRR_user_V_1_ack_out) & (1'b1 == OUTPUT_ARRR_user_V_1_vld_out))) begin
            OUTPUT_ARRR_user_V_1_sel_rd <= ~OUTPUT_ARRR_user_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        OUTPUT_ARRR_user_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == OUTPUT_ARRR_user_V_1_ack_in) & (1'b1 == OUTPUT_ARRR_user_V_1_vld_in))) begin
            OUTPUT_ARRR_user_V_1_sel_wr <= ~OUTPUT_ARRR_user_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        OUTPUT_ARRR_user_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == OUTPUT_ARRR_user_V_1_vld_in) & (2'd2 == OUTPUT_ARRR_user_V_1_state)) | ((1'b0 == OUTPUT_ARRR_user_V_1_vld_in) & (1'b1 == OUTPUT_ARRR_user_V_1_ack_out) & (2'd3 == OUTPUT_ARRR_user_V_1_state)))) begin
            OUTPUT_ARRR_user_V_1_state <= 2'd2;
        end else if ((((1'b0 == OUTPUT_ARRR_user_V_1_ack_out) & (2'd1 == OUTPUT_ARRR_user_V_1_state)) | ((1'b0 == OUTPUT_ARRR_user_V_1_ack_out) & (1'b1 == OUTPUT_ARRR_user_V_1_vld_in) & (2'd3 == OUTPUT_ARRR_user_V_1_state)))) begin
            OUTPUT_ARRR_user_V_1_state <= 2'd1;
        end else if (((~((1'b0 == OUTPUT_ARRR_user_V_1_vld_in) & (1'b1 == OUTPUT_ARRR_user_V_1_ack_out)) & ~((1'b0 == OUTPUT_ARRR_user_V_1_ack_out) & (1'b1 == OUTPUT_ARRR_user_V_1_vld_in)) & (2'd3 == OUTPUT_ARRR_user_V_1_state)) | ((1'b1 == OUTPUT_ARRR_user_V_1_ack_out) & (2'd1 == OUTPUT_ARRR_user_V_1_state)) | ((1'b1 == OUTPUT_ARRR_user_V_1_vld_in) & (2'd2 == OUTPUT_ARRR_user_V_1_state)))) begin
            OUTPUT_ARRR_user_V_1_state <= 2'd3;
        end else begin
            OUTPUT_ARRR_user_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_11001) & (exitcond_reg_1176 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone)) | ((1'b1 == ap_CS_fsm_pp0_stage9) & (1'b0 == ap_block_pp0_stage9_subdone)))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_reg_1176 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_reg_333 <= i_1_9_reg_1035;
    end else if ((((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_reg_1176 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | (~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        i_reg_333 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == INPUT_ARR_dest_V_0_load_A)) begin
        INPUT_ARR_dest_V_0_payload_A <= INPUT_ARR_TDEST;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == INPUT_ARR_dest_V_0_load_B)) begin
        INPUT_ARR_dest_V_0_payload_B <= INPUT_ARR_TDEST;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        INPUT_ARR_dest_V_val_10_reg_830 <= INPUT_ARR_dest_V_0_data_out;
        INPUT_ARR_id_V_val1_reg_835 <= INPUT_ARR_id_V_0_data_out;
        INPUT_ARR_last_V_val_10_reg_840 <= INPUT_ARR_last_V_0_data_out;
        INPUT_ARR_user_V_val_10_reg_845 <= INPUT_ARR_user_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        INPUT_ARR_dest_V_val_11_reg_880 <= INPUT_ARR_dest_V_0_data_out;
        INPUT_ARR_id_V_val2_reg_885 <= INPUT_ARR_id_V_0_data_out;
        INPUT_ARR_last_V_val_11_reg_890 <= INPUT_ARR_last_V_0_data_out;
        INPUT_ARR_user_V_val_11_reg_895 <= INPUT_ARR_user_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        INPUT_ARR_dest_V_val_12_reg_930 <= INPUT_ARR_dest_V_0_data_out;
        INPUT_ARR_id_V_val3_reg_935 <= INPUT_ARR_id_V_0_data_out;
        INPUT_ARR_last_V_val_12_reg_940 <= INPUT_ARR_last_V_0_data_out;
        INPUT_ARR_user_V_val_12_reg_945 <= INPUT_ARR_user_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        INPUT_ARR_dest_V_val_13_reg_985 <= INPUT_ARR_dest_V_0_data_out;
        INPUT_ARR_id_V_val4_reg_990 <= INPUT_ARR_id_V_0_data_out;
        INPUT_ARR_last_V_val_13_reg_995 <= INPUT_ARR_last_V_0_data_out;
        INPUT_ARR_user_V_val_13_reg_1000 <= INPUT_ARR_user_V_0_data_out;
        i_1_9_reg_1035 <= i_1_9_fu_699_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage5_11001))) begin
        INPUT_ARR_dest_V_val_14_reg_1046 <= INPUT_ARR_dest_V_0_data_out;
        INPUT_ARR_id_V_val5_reg_1051 <= INPUT_ARR_id_V_0_data_out;
        INPUT_ARR_last_V_val_14_reg_1056 <= INPUT_ARR_last_V_0_data_out;
        INPUT_ARR_user_V_val_14_reg_1061 <= INPUT_ARR_user_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        INPUT_ARR_dest_V_val_15_reg_1081 <= INPUT_ARR_dest_V_0_data_out;
        INPUT_ARR_id_V_val6_reg_1086 <= INPUT_ARR_id_V_0_data_out;
        INPUT_ARR_last_V_val_15_reg_1091 <= INPUT_ARR_last_V_0_data_out;
        INPUT_ARR_user_V_val_15_reg_1096 <= INPUT_ARR_user_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage7_11001))) begin
        INPUT_ARR_dest_V_val_16_reg_1106 <= INPUT_ARR_dest_V_0_data_out;
        INPUT_ARR_id_V_val7_reg_1111 <= INPUT_ARR_id_V_0_data_out;
        INPUT_ARR_last_V_val_16_reg_1116 <= INPUT_ARR_last_V_0_data_out;
        INPUT_ARR_user_V_val_16_reg_1121 <= INPUT_ARR_user_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage8_11001) & (1'b1 == ap_CS_fsm_pp0_stage8) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        INPUT_ARR_dest_V_val_17_reg_1131 <= INPUT_ARR_dest_V_0_data_out;
        INPUT_ARR_id_V_val8_reg_1136 <= INPUT_ARR_id_V_0_data_out;
        INPUT_ARR_last_V_val_17_reg_1141 <= INPUT_ARR_last_V_0_data_out;
        INPUT_ARR_user_V_val_17_reg_1146 <= INPUT_ARR_user_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage9_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9))) begin
        INPUT_ARR_dest_V_val_18_reg_1156 <= INPUT_ARR_dest_V_0_data_out;
        INPUT_ARR_id_V_val9_reg_1161 <= INPUT_ARR_id_V_0_data_out;
        INPUT_ARR_last_V_val_18_reg_1166 <= INPUT_ARR_last_V_0_data_out;
        INPUT_ARR_user_V_val_18_reg_1171 <= INPUT_ARR_user_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        INPUT_ARR_dest_V_val_reg_790 <= INPUT_ARR_dest_V_0_data_out;
        INPUT_ARR_id_V_val_reg_795 <= INPUT_ARR_id_V_0_data_out;
        INPUT_ARR_last_V_val_reg_800 <= INPUT_ARR_last_V_0_data_out;
        INPUT_ARR_user_V_val_reg_805 <= INPUT_ARR_user_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == INPUT_ARR_id_V_0_load_A)) begin
        INPUT_ARR_id_V_0_payload_A <= INPUT_ARR_TID;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == INPUT_ARR_id_V_0_load_B)) begin
        INPUT_ARR_id_V_0_payload_B <= INPUT_ARR_TID;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == INPUT_ARR_keep_V_0_load_A)) begin
        INPUT_ARR_keep_V_0_payload_A <= INPUT_ARR_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == INPUT_ARR_keep_V_0_load_B)) begin
        INPUT_ARR_keep_V_0_payload_B <= INPUT_ARR_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == INPUT_ARR_last_V_0_load_A)) begin
        INPUT_ARR_last_V_0_payload_A <= INPUT_ARR_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == INPUT_ARR_last_V_0_load_B)) begin
        INPUT_ARR_last_V_0_payload_B <= INPUT_ARR_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == INPUT_ARR_strb_V_0_load_A)) begin
        INPUT_ARR_strb_V_0_payload_A <= INPUT_ARR_TSTRB;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == INPUT_ARR_strb_V_0_load_B)) begin
        INPUT_ARR_strb_V_0_payload_B <= INPUT_ARR_TSTRB;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == INPUT_ARR_user_V_0_load_A)) begin
        INPUT_ARR_user_V_0_payload_A <= INPUT_ARR_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == INPUT_ARR_user_V_0_load_B)) begin
        INPUT_ARR_user_V_0_payload_B <= INPUT_ARR_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == OUTPUT_ARRR_data_V_1_load_A)) begin
        OUTPUT_ARRR_data_V_1_payload_A <= OUTPUT_ARRR_data_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == OUTPUT_ARRR_data_V_1_load_B)) begin
        OUTPUT_ARRR_data_V_1_payload_B <= OUTPUT_ARRR_data_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == OUTPUT_ARRR_dest_V_1_load_A)) begin
        OUTPUT_ARRR_dest_V_1_payload_A <= OUTPUT_ARRR_dest_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == OUTPUT_ARRR_dest_V_1_load_B)) begin
        OUTPUT_ARRR_dest_V_1_payload_B <= OUTPUT_ARRR_dest_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == OUTPUT_ARRR_id_V_1_load_A)) begin
        OUTPUT_ARRR_id_V_1_payload_A <= OUTPUT_ARRR_id_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == OUTPUT_ARRR_id_V_1_load_B)) begin
        OUTPUT_ARRR_id_V_1_payload_B <= OUTPUT_ARRR_id_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == OUTPUT_ARRR_keep_V_1_load_A)) begin
        OUTPUT_ARRR_keep_V_1_payload_A <= OUTPUT_ARRR_keep_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == OUTPUT_ARRR_keep_V_1_load_B)) begin
        OUTPUT_ARRR_keep_V_1_payload_B <= OUTPUT_ARRR_keep_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == OUTPUT_ARRR_last_V_1_load_A)) begin
        OUTPUT_ARRR_last_V_1_payload_A <= OUTPUT_ARRR_last_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == OUTPUT_ARRR_last_V_1_load_B)) begin
        OUTPUT_ARRR_last_V_1_payload_B <= OUTPUT_ARRR_last_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == OUTPUT_ARRR_strb_V_1_load_A)) begin
        OUTPUT_ARRR_strb_V_1_payload_A <= OUTPUT_ARRR_strb_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == OUTPUT_ARRR_strb_V_1_load_B)) begin
        OUTPUT_ARRR_strb_V_1_payload_B <= OUTPUT_ARRR_strb_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == OUTPUT_ARRR_user_V_1_load_A)) begin
        OUTPUT_ARRR_user_V_1_payload_A <= OUTPUT_ARRR_user_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == OUTPUT_ARRR_user_V_1_load_B)) begin
        OUTPUT_ARRR_user_V_1_payload_B <= OUTPUT_ARRR_user_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage9_11001) & (1'b1 == ap_CS_fsm_pp0_stage9))) begin
        exitcond_reg_1176 <= exitcond_fu_769_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage8_11001) & (1'b1 == ap_CS_fsm_pp0_stage8) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        reg_372 <= INPUT_ARR_strb_V_0_data_out;
        reg_377 <= INPUT_ARR_keep_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage7_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage5_11001)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage9_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9)))) begin
        reg_382 <= INPUT_ARR_strb_V_0_data_out;
        reg_387 <= INPUT_ARR_keep_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        tmp_3_1_reg_825 <= tmp_3_1_fu_453_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        tmp_3_2_reg_875 <= tmp_3_2_fu_503_p2;
        tmp_3_3_reg_900 <= tmp_3_3_fu_525_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        tmp_3_4_reg_950 <= tmp_3_4_fu_575_p2;
        tmp_3_5_reg_955 <= tmp_3_5_fu_597_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        tmp_3_6_reg_1005 <= tmp_3_6_fu_647_p2;
        tmp_3_7_reg_1010 <= tmp_3_7_fu_669_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001))) begin
        tmp_3_8_reg_1066 <= tmp_3_8_fu_725_p2;
        tmp_3_9_reg_1071 <= tmp_3_9_fu_747_p2;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage8_11001) & (1'b1 == ap_CS_fsm_pp0_stage8) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage7_11001)) | ((1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage5_11001)) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage9_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9)))) begin
        INPUT_ARR_dest_V_0_ack_out = 1'b1;
    end else begin
        INPUT_ARR_dest_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == INPUT_ARR_dest_V_0_sel)) begin
        INPUT_ARR_dest_V_0_data_out = INPUT_ARR_dest_V_0_payload_B;
    end else begin
        INPUT_ARR_dest_V_0_data_out = INPUT_ARR_dest_V_0_payload_A;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage8_11001) & (1'b1 == ap_CS_fsm_pp0_stage8) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage7_11001)) | ((1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage5_11001)) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage9_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9)))) begin
        INPUT_ARR_id_V_0_ack_out = 1'b1;
    end else begin
        INPUT_ARR_id_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == INPUT_ARR_id_V_0_sel)) begin
        INPUT_ARR_id_V_0_data_out = INPUT_ARR_id_V_0_payload_B;
    end else begin
        INPUT_ARR_id_V_0_data_out = INPUT_ARR_id_V_0_payload_A;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage8_11001) & (1'b1 == ap_CS_fsm_pp0_stage8) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage7_11001)) | ((1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage5_11001)) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage9_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9)))) begin
        INPUT_ARR_keep_V_0_ack_out = 1'b1;
    end else begin
        INPUT_ARR_keep_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == INPUT_ARR_keep_V_0_sel)) begin
        INPUT_ARR_keep_V_0_data_out = INPUT_ARR_keep_V_0_payload_B;
    end else begin
        INPUT_ARR_keep_V_0_data_out = INPUT_ARR_keep_V_0_payload_A;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage8_11001) & (1'b1 == ap_CS_fsm_pp0_stage8) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage7_11001)) | ((1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage5_11001)) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage9_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9)))) begin
        INPUT_ARR_last_V_0_ack_out = 1'b1;
    end else begin
        INPUT_ARR_last_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == INPUT_ARR_last_V_0_sel)) begin
        INPUT_ARR_last_V_0_data_out = INPUT_ARR_last_V_0_payload_B;
    end else begin
        INPUT_ARR_last_V_0_data_out = INPUT_ARR_last_V_0_payload_A;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage8_11001) & (1'b1 == ap_CS_fsm_pp0_stage8) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage7_11001)) | ((1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage5_11001)) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage9_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9)))) begin
        INPUT_ARR_strb_V_0_ack_out = 1'b1;
    end else begin
        INPUT_ARR_strb_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == INPUT_ARR_strb_V_0_sel)) begin
        INPUT_ARR_strb_V_0_data_out = INPUT_ARR_strb_V_0_payload_B;
    end else begin
        INPUT_ARR_strb_V_0_data_out = INPUT_ARR_strb_V_0_payload_A;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage8_11001) & (1'b1 == ap_CS_fsm_pp0_stage8) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage7_11001)) | ((1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage5_11001)) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage9_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9)))) begin
        INPUT_ARR_user_V_0_ack_out = 1'b1;
    end else begin
        INPUT_ARR_user_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == INPUT_ARR_user_V_0_sel)) begin
        INPUT_ARR_user_V_0_data_out = INPUT_ARR_user_V_0_payload_B;
    end else begin
        INPUT_ARR_user_V_0_data_out = INPUT_ARR_user_V_0_payload_A;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage8) & (1'b1 == ap_CS_fsm_pp0_stage8) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage7) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage6) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage9) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9)))) begin
        OUTPUT_ARRR_TDATA_blk_n = OUTPUT_ARRR_data_V_1_state[1'd1];
    end else begin
        OUTPUT_ARRR_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_01001))) begin
        OUTPUT_ARRR_data_V_1_data_in = tmp_3_9_cast_fu_774_p1;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9) & (1'b0 == ap_block_pp0_stage9_01001))) begin
        OUTPUT_ARRR_data_V_1_data_in = tmp_3_8_cast_fu_765_p1;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage8) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage8_01001))) begin
        OUTPUT_ARRR_data_V_1_data_in = tmp_3_7_cast_fu_761_p1;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage7_01001))) begin
        OUTPUT_ARRR_data_V_1_data_in = tmp_3_6_cast_fu_757_p1;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage6_01001))) begin
        OUTPUT_ARRR_data_V_1_data_in = tmp_3_5_cast_fu_753_p1;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage5_01001))) begin
        OUTPUT_ARRR_data_V_1_data_in = tmp_3_4_cast_fu_705_p1;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage4_01001))) begin
        OUTPUT_ARRR_data_V_1_data_in = tmp_3_3_cast_fu_627_p1;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage3_01001))) begin
        OUTPUT_ARRR_data_V_1_data_in = tmp_3_2_cast_fu_555_p1;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage2_01001))) begin
        OUTPUT_ARRR_data_V_1_data_in = tmp_3_1_cast_fu_483_p1;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_01001))) begin
        OUTPUT_ARRR_data_V_1_data_in = tmp_3_cast_fu_432_p1;
    end else begin
        OUTPUT_ARRR_data_V_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == OUTPUT_ARRR_data_V_1_sel)) begin
        OUTPUT_ARRR_data_V_1_data_out = OUTPUT_ARRR_data_V_1_payload_B;
    end else begin
        OUTPUT_ARRR_data_V_1_data_out = OUTPUT_ARRR_data_V_1_payload_A;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage8_11001) & (1'b1 == ap_CS_fsm_pp0_stage8) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage7_11001)) | ((1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage5_11001)) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage9_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9)))) begin
        OUTPUT_ARRR_data_V_1_vld_in = 1'b1;
    end else begin
        OUTPUT_ARRR_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_01001))) begin
        OUTPUT_ARRR_dest_V_1_data_in = INPUT_ARR_dest_V_val_18_reg_1156;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9) & (1'b0 == ap_block_pp0_stage9_01001))) begin
        OUTPUT_ARRR_dest_V_1_data_in = INPUT_ARR_dest_V_val_17_reg_1131;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage8) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage8_01001))) begin
        OUTPUT_ARRR_dest_V_1_data_in = INPUT_ARR_dest_V_val_16_reg_1106;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage7_01001))) begin
        OUTPUT_ARRR_dest_V_1_data_in = INPUT_ARR_dest_V_val_15_reg_1081;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage6_01001))) begin
        OUTPUT_ARRR_dest_V_1_data_in = INPUT_ARR_dest_V_val_14_reg_1046;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage5_01001))) begin
        OUTPUT_ARRR_dest_V_1_data_in = INPUT_ARR_dest_V_val_13_reg_985;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage4_01001))) begin
        OUTPUT_ARRR_dest_V_1_data_in = INPUT_ARR_dest_V_val_12_reg_930;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage3_01001))) begin
        OUTPUT_ARRR_dest_V_1_data_in = INPUT_ARR_dest_V_val_11_reg_880;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage2_01001))) begin
        OUTPUT_ARRR_dest_V_1_data_in = INPUT_ARR_dest_V_val_10_reg_830;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_01001))) begin
        OUTPUT_ARRR_dest_V_1_data_in = INPUT_ARR_dest_V_val_reg_790;
    end else begin
        OUTPUT_ARRR_dest_V_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == OUTPUT_ARRR_dest_V_1_sel)) begin
        OUTPUT_ARRR_dest_V_1_data_out = OUTPUT_ARRR_dest_V_1_payload_B;
    end else begin
        OUTPUT_ARRR_dest_V_1_data_out = OUTPUT_ARRR_dest_V_1_payload_A;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage8_11001) & (1'b1 == ap_CS_fsm_pp0_stage8) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage7_11001)) | ((1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage5_11001)) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage9_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9)))) begin
        OUTPUT_ARRR_dest_V_1_vld_in = 1'b1;
    end else begin
        OUTPUT_ARRR_dest_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_01001))) begin
        OUTPUT_ARRR_id_V_1_data_in = INPUT_ARR_id_V_val9_reg_1161;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9) & (1'b0 == ap_block_pp0_stage9_01001))) begin
        OUTPUT_ARRR_id_V_1_data_in = INPUT_ARR_id_V_val8_reg_1136;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage8) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage8_01001))) begin
        OUTPUT_ARRR_id_V_1_data_in = INPUT_ARR_id_V_val7_reg_1111;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage7_01001))) begin
        OUTPUT_ARRR_id_V_1_data_in = INPUT_ARR_id_V_val6_reg_1086;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage6_01001))) begin
        OUTPUT_ARRR_id_V_1_data_in = INPUT_ARR_id_V_val5_reg_1051;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage5_01001))) begin
        OUTPUT_ARRR_id_V_1_data_in = INPUT_ARR_id_V_val4_reg_990;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage4_01001))) begin
        OUTPUT_ARRR_id_V_1_data_in = INPUT_ARR_id_V_val3_reg_935;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage3_01001))) begin
        OUTPUT_ARRR_id_V_1_data_in = INPUT_ARR_id_V_val2_reg_885;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage2_01001))) begin
        OUTPUT_ARRR_id_V_1_data_in = INPUT_ARR_id_V_val1_reg_835;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_01001))) begin
        OUTPUT_ARRR_id_V_1_data_in = INPUT_ARR_id_V_val_reg_795;
    end else begin
        OUTPUT_ARRR_id_V_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == OUTPUT_ARRR_id_V_1_sel)) begin
        OUTPUT_ARRR_id_V_1_data_out = OUTPUT_ARRR_id_V_1_payload_B;
    end else begin
        OUTPUT_ARRR_id_V_1_data_out = OUTPUT_ARRR_id_V_1_payload_A;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage8_11001) & (1'b1 == ap_CS_fsm_pp0_stage8) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage7_11001)) | ((1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage5_11001)) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage9_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9)))) begin
        OUTPUT_ARRR_id_V_1_vld_in = 1'b1;
    end else begin
        OUTPUT_ARRR_id_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_01001)) | ((1'b1 == ap_CS_fsm_pp0_stage8) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage8_01001)) | ((1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage6_01001)) | ((1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage4_01001)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage2_01001)))) begin
        OUTPUT_ARRR_keep_V_1_data_in = reg_387;
    end else if ((((1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage7_01001)) | ((1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage5_01001)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage3_01001)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_01001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9) & (1'b0 == ap_block_pp0_stage9_01001)))) begin
        OUTPUT_ARRR_keep_V_1_data_in = reg_377;
    end else begin
        OUTPUT_ARRR_keep_V_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == OUTPUT_ARRR_keep_V_1_sel)) begin
        OUTPUT_ARRR_keep_V_1_data_out = OUTPUT_ARRR_keep_V_1_payload_B;
    end else begin
        OUTPUT_ARRR_keep_V_1_data_out = OUTPUT_ARRR_keep_V_1_payload_A;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage8_11001) & (1'b1 == ap_CS_fsm_pp0_stage8) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage7_11001)) | ((1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage5_11001)) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage9_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9)))) begin
        OUTPUT_ARRR_keep_V_1_vld_in = 1'b1;
    end else begin
        OUTPUT_ARRR_keep_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_01001))) begin
        OUTPUT_ARRR_last_V_1_data_in = INPUT_ARR_last_V_val_18_reg_1166;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9) & (1'b0 == ap_block_pp0_stage9_01001))) begin
        OUTPUT_ARRR_last_V_1_data_in = INPUT_ARR_last_V_val_17_reg_1141;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage8) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage8_01001))) begin
        OUTPUT_ARRR_last_V_1_data_in = INPUT_ARR_last_V_val_16_reg_1116;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage7_01001))) begin
        OUTPUT_ARRR_last_V_1_data_in = INPUT_ARR_last_V_val_15_reg_1091;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage6_01001))) begin
        OUTPUT_ARRR_last_V_1_data_in = INPUT_ARR_last_V_val_14_reg_1056;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage5_01001))) begin
        OUTPUT_ARRR_last_V_1_data_in = INPUT_ARR_last_V_val_13_reg_995;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage4_01001))) begin
        OUTPUT_ARRR_last_V_1_data_in = INPUT_ARR_last_V_val_12_reg_940;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage3_01001))) begin
        OUTPUT_ARRR_last_V_1_data_in = INPUT_ARR_last_V_val_11_reg_890;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage2_01001))) begin
        OUTPUT_ARRR_last_V_1_data_in = INPUT_ARR_last_V_val_10_reg_840;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_01001))) begin
        OUTPUT_ARRR_last_V_1_data_in = INPUT_ARR_last_V_val_reg_800;
    end else begin
        OUTPUT_ARRR_last_V_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == OUTPUT_ARRR_last_V_1_sel)) begin
        OUTPUT_ARRR_last_V_1_data_out = OUTPUT_ARRR_last_V_1_payload_B;
    end else begin
        OUTPUT_ARRR_last_V_1_data_out = OUTPUT_ARRR_last_V_1_payload_A;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage8_11001) & (1'b1 == ap_CS_fsm_pp0_stage8) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage7_11001)) | ((1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage5_11001)) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage9_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9)))) begin
        OUTPUT_ARRR_last_V_1_vld_in = 1'b1;
    end else begin
        OUTPUT_ARRR_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_01001)) | ((1'b1 == ap_CS_fsm_pp0_stage8) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage8_01001)) | ((1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage6_01001)) | ((1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage4_01001)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage2_01001)))) begin
        OUTPUT_ARRR_strb_V_1_data_in = reg_382;
    end else if ((((1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage7_01001)) | ((1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage5_01001)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage3_01001)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_01001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9) & (1'b0 == ap_block_pp0_stage9_01001)))) begin
        OUTPUT_ARRR_strb_V_1_data_in = reg_372;
    end else begin
        OUTPUT_ARRR_strb_V_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == OUTPUT_ARRR_strb_V_1_sel)) begin
        OUTPUT_ARRR_strb_V_1_data_out = OUTPUT_ARRR_strb_V_1_payload_B;
    end else begin
        OUTPUT_ARRR_strb_V_1_data_out = OUTPUT_ARRR_strb_V_1_payload_A;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage8_11001) & (1'b1 == ap_CS_fsm_pp0_stage8) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage7_11001)) | ((1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage5_11001)) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage9_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9)))) begin
        OUTPUT_ARRR_strb_V_1_vld_in = 1'b1;
    end else begin
        OUTPUT_ARRR_strb_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_01001))) begin
        OUTPUT_ARRR_user_V_1_data_in = INPUT_ARR_user_V_val_18_reg_1171;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9) & (1'b0 == ap_block_pp0_stage9_01001))) begin
        OUTPUT_ARRR_user_V_1_data_in = INPUT_ARR_user_V_val_17_reg_1146;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage8) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage8_01001))) begin
        OUTPUT_ARRR_user_V_1_data_in = INPUT_ARR_user_V_val_16_reg_1121;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage7_01001))) begin
        OUTPUT_ARRR_user_V_1_data_in = INPUT_ARR_user_V_val_15_reg_1096;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage6_01001))) begin
        OUTPUT_ARRR_user_V_1_data_in = INPUT_ARR_user_V_val_14_reg_1061;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage5_01001))) begin
        OUTPUT_ARRR_user_V_1_data_in = INPUT_ARR_user_V_val_13_reg_1000;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage4_01001))) begin
        OUTPUT_ARRR_user_V_1_data_in = INPUT_ARR_user_V_val_12_reg_945;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage3_01001))) begin
        OUTPUT_ARRR_user_V_1_data_in = INPUT_ARR_user_V_val_11_reg_895;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage2_01001))) begin
        OUTPUT_ARRR_user_V_1_data_in = INPUT_ARR_user_V_val_10_reg_845;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_01001))) begin
        OUTPUT_ARRR_user_V_1_data_in = INPUT_ARR_user_V_val_reg_805;
    end else begin
        OUTPUT_ARRR_user_V_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == OUTPUT_ARRR_user_V_1_sel)) begin
        OUTPUT_ARRR_user_V_1_data_out = OUTPUT_ARRR_user_V_1_payload_B;
    end else begin
        OUTPUT_ARRR_user_V_1_data_out = OUTPUT_ARRR_user_V_1_payload_A;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage8_11001) & (1'b1 == ap_CS_fsm_pp0_stage8) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage7_11001)) | ((1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage5_11001)) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage9_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9)))) begin
        OUTPUT_ARRR_user_V_1_vld_in = 1'b1;
    end else begin
        OUTPUT_ARRR_user_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (exitcond_reg_1176 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_928)) begin
        if ((exitcond_reg_1176 == 1'd1)) begin
            ap_phi_mux_i_phi_fu_337_p6 = 6'd0;
        end else if ((exitcond_reg_1176 == 1'd0)) begin
            ap_phi_mux_i_phi_fu_337_p6 = i_1_9_reg_1035;
        end else begin
            ap_phi_mux_i_phi_fu_337_p6 = i_reg_333;
        end
    end else begin
        ap_phi_mux_i_phi_fu_337_p6 = i_reg_333;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage9_11001) & (exitcond_fu_769_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to0 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            x_V_address0 = tmp_2_8_fu_681_p1;
        end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            x_V_address0 = tmp_2_6_fu_609_p1;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            x_V_address0 = tmp_2_4_fu_537_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            x_V_address0 = tmp_2_2_fu_465_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            x_V_address0 = tmp_2_fu_392_p1;
        end else begin
            x_V_address0 = 'bx;
        end
    end else begin
        x_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            x_V_address1 = tmp_2_9_fu_693_p1;
        end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            x_V_address1 = tmp_2_7_fu_621_p1;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            x_V_address1 = tmp_2_5_fu_549_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            x_V_address1 = tmp_2_3_fu_477_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            x_V_address1 = tmp_2_1_fu_404_p1;
        end else begin
            x_V_address1 = 'bx;
        end
    end else begin
        x_V_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        x_V_ce0 = 1'b1;
    end else begin
        x_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        x_V_ce1 = 1'b1;
    end else begin
        x_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            y_V_address0 = tmp_2_8_fu_681_p1;
        end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            y_V_address0 = tmp_2_6_fu_609_p1;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            y_V_address0 = tmp_2_4_fu_537_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            y_V_address0 = tmp_2_2_fu_465_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            y_V_address0 = tmp_2_fu_392_p1;
        end else begin
            y_V_address0 = 'bx;
        end
    end else begin
        y_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            y_V_address1 = tmp_2_9_fu_693_p1;
        end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            y_V_address1 = tmp_2_7_fu_621_p1;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            y_V_address1 = tmp_2_5_fu_549_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            y_V_address1 = tmp_2_3_fu_477_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            y_V_address1 = tmp_2_1_fu_404_p1;
        end else begin
            y_V_address1 = 'bx;
        end
    end else begin
        y_V_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        y_V_ce0 = 1'b1;
    end else begin
        y_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        y_V_ce1 = 1'b1;
    end else begin
        y_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if (((ap_reset_idle_pp0 == 1'b0) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else if (((ap_reset_idle_pp0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if ((1'b0 == ap_block_pp0_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        ap_ST_fsm_pp0_stage7 : begin
            if ((1'b0 == ap_block_pp0_stage7_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end
        end
        ap_ST_fsm_pp0_stage8 : begin
            if ((1'b0 == ap_block_pp0_stage8_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end
        end
        ap_ST_fsm_pp0_stage9 : begin
            if ((1'b0 == ap_block_pp0_stage9_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign INPUT_ARR_TREADY = INPUT_ARR_dest_V_0_state[1'd1];

assign INPUT_ARR_dest_V_0_ack_in = INPUT_ARR_dest_V_0_state[1'd1];

assign INPUT_ARR_dest_V_0_load_A = (~INPUT_ARR_dest_V_0_sel_wr & INPUT_ARR_dest_V_0_state_cmp_full);

assign INPUT_ARR_dest_V_0_load_B = (INPUT_ARR_dest_V_0_state_cmp_full & INPUT_ARR_dest_V_0_sel_wr);

assign INPUT_ARR_dest_V_0_sel = INPUT_ARR_dest_V_0_sel_rd;

assign INPUT_ARR_dest_V_0_state_cmp_full = ((INPUT_ARR_dest_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign INPUT_ARR_dest_V_0_vld_in = INPUT_ARR_TVALID;

assign INPUT_ARR_dest_V_0_vld_out = INPUT_ARR_dest_V_0_state[1'd0];

assign INPUT_ARR_id_V_0_ack_in = INPUT_ARR_id_V_0_state[1'd1];

assign INPUT_ARR_id_V_0_load_A = (~INPUT_ARR_id_V_0_sel_wr & INPUT_ARR_id_V_0_state_cmp_full);

assign INPUT_ARR_id_V_0_load_B = (INPUT_ARR_id_V_0_state_cmp_full & INPUT_ARR_id_V_0_sel_wr);

assign INPUT_ARR_id_V_0_sel = INPUT_ARR_id_V_0_sel_rd;

assign INPUT_ARR_id_V_0_state_cmp_full = ((INPUT_ARR_id_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign INPUT_ARR_id_V_0_vld_in = INPUT_ARR_TVALID;

assign INPUT_ARR_id_V_0_vld_out = INPUT_ARR_id_V_0_state[1'd0];

assign INPUT_ARR_keep_V_0_ack_in = INPUT_ARR_keep_V_0_state[1'd1];

assign INPUT_ARR_keep_V_0_load_A = (~INPUT_ARR_keep_V_0_sel_wr & INPUT_ARR_keep_V_0_state_cmp_full);

assign INPUT_ARR_keep_V_0_load_B = (INPUT_ARR_keep_V_0_state_cmp_full & INPUT_ARR_keep_V_0_sel_wr);

assign INPUT_ARR_keep_V_0_sel = INPUT_ARR_keep_V_0_sel_rd;

assign INPUT_ARR_keep_V_0_state_cmp_full = ((INPUT_ARR_keep_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign INPUT_ARR_keep_V_0_vld_in = INPUT_ARR_TVALID;

assign INPUT_ARR_keep_V_0_vld_out = INPUT_ARR_keep_V_0_state[1'd0];

assign INPUT_ARR_last_V_0_ack_in = INPUT_ARR_last_V_0_state[1'd1];

assign INPUT_ARR_last_V_0_load_A = (~INPUT_ARR_last_V_0_sel_wr & INPUT_ARR_last_V_0_state_cmp_full);

assign INPUT_ARR_last_V_0_load_B = (INPUT_ARR_last_V_0_state_cmp_full & INPUT_ARR_last_V_0_sel_wr);

assign INPUT_ARR_last_V_0_sel = INPUT_ARR_last_V_0_sel_rd;

assign INPUT_ARR_last_V_0_state_cmp_full = ((INPUT_ARR_last_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign INPUT_ARR_last_V_0_vld_in = INPUT_ARR_TVALID;

assign INPUT_ARR_last_V_0_vld_out = INPUT_ARR_last_V_0_state[1'd0];

assign INPUT_ARR_strb_V_0_ack_in = INPUT_ARR_strb_V_0_state[1'd1];

assign INPUT_ARR_strb_V_0_load_A = (~INPUT_ARR_strb_V_0_sel_wr & INPUT_ARR_strb_V_0_state_cmp_full);

assign INPUT_ARR_strb_V_0_load_B = (INPUT_ARR_strb_V_0_state_cmp_full & INPUT_ARR_strb_V_0_sel_wr);

assign INPUT_ARR_strb_V_0_sel = INPUT_ARR_strb_V_0_sel_rd;

assign INPUT_ARR_strb_V_0_state_cmp_full = ((INPUT_ARR_strb_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign INPUT_ARR_strb_V_0_vld_in = INPUT_ARR_TVALID;

assign INPUT_ARR_strb_V_0_vld_out = INPUT_ARR_strb_V_0_state[1'd0];

assign INPUT_ARR_user_V_0_ack_in = INPUT_ARR_user_V_0_state[1'd1];

assign INPUT_ARR_user_V_0_load_A = (~INPUT_ARR_user_V_0_sel_wr & INPUT_ARR_user_V_0_state_cmp_full);

assign INPUT_ARR_user_V_0_load_B = (INPUT_ARR_user_V_0_state_cmp_full & INPUT_ARR_user_V_0_sel_wr);

assign INPUT_ARR_user_V_0_sel = INPUT_ARR_user_V_0_sel_rd;

assign INPUT_ARR_user_V_0_state_cmp_full = ((INPUT_ARR_user_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign INPUT_ARR_user_V_0_vld_in = INPUT_ARR_TVALID;

assign INPUT_ARR_user_V_0_vld_out = INPUT_ARR_user_V_0_state[1'd0];

assign OUTPUT_ARRR_TDATA = OUTPUT_ARRR_data_V_1_data_out;

assign OUTPUT_ARRR_TDEST = OUTPUT_ARRR_dest_V_1_data_out;

assign OUTPUT_ARRR_TID = OUTPUT_ARRR_id_V_1_data_out;

assign OUTPUT_ARRR_TKEEP = OUTPUT_ARRR_keep_V_1_data_out;

assign OUTPUT_ARRR_TLAST = OUTPUT_ARRR_last_V_1_data_out;

assign OUTPUT_ARRR_TSTRB = OUTPUT_ARRR_strb_V_1_data_out;

assign OUTPUT_ARRR_TUSER = OUTPUT_ARRR_user_V_1_data_out;

assign OUTPUT_ARRR_TVALID = OUTPUT_ARRR_dest_V_1_state[1'd0];

assign OUTPUT_ARRR_data_V_1_ack_in = OUTPUT_ARRR_data_V_1_state[1'd1];

assign OUTPUT_ARRR_data_V_1_ack_out = OUTPUT_ARRR_TREADY;

assign OUTPUT_ARRR_data_V_1_load_A = (~OUTPUT_ARRR_data_V_1_sel_wr & OUTPUT_ARRR_data_V_1_state_cmp_full);

assign OUTPUT_ARRR_data_V_1_load_B = (OUTPUT_ARRR_data_V_1_state_cmp_full & OUTPUT_ARRR_data_V_1_sel_wr);

assign OUTPUT_ARRR_data_V_1_sel = OUTPUT_ARRR_data_V_1_sel_rd;

assign OUTPUT_ARRR_data_V_1_state_cmp_full = ((OUTPUT_ARRR_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign OUTPUT_ARRR_data_V_1_vld_out = OUTPUT_ARRR_data_V_1_state[1'd0];

assign OUTPUT_ARRR_dest_V_1_ack_in = OUTPUT_ARRR_dest_V_1_state[1'd1];

assign OUTPUT_ARRR_dest_V_1_ack_out = OUTPUT_ARRR_TREADY;

assign OUTPUT_ARRR_dest_V_1_load_A = (~OUTPUT_ARRR_dest_V_1_sel_wr & OUTPUT_ARRR_dest_V_1_state_cmp_full);

assign OUTPUT_ARRR_dest_V_1_load_B = (OUTPUT_ARRR_dest_V_1_state_cmp_full & OUTPUT_ARRR_dest_V_1_sel_wr);

assign OUTPUT_ARRR_dest_V_1_sel = OUTPUT_ARRR_dest_V_1_sel_rd;

assign OUTPUT_ARRR_dest_V_1_state_cmp_full = ((OUTPUT_ARRR_dest_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign OUTPUT_ARRR_dest_V_1_vld_out = OUTPUT_ARRR_dest_V_1_state[1'd0];

assign OUTPUT_ARRR_id_V_1_ack_in = OUTPUT_ARRR_id_V_1_state[1'd1];

assign OUTPUT_ARRR_id_V_1_ack_out = OUTPUT_ARRR_TREADY;

assign OUTPUT_ARRR_id_V_1_load_A = (~OUTPUT_ARRR_id_V_1_sel_wr & OUTPUT_ARRR_id_V_1_state_cmp_full);

assign OUTPUT_ARRR_id_V_1_load_B = (OUTPUT_ARRR_id_V_1_state_cmp_full & OUTPUT_ARRR_id_V_1_sel_wr);

assign OUTPUT_ARRR_id_V_1_sel = OUTPUT_ARRR_id_V_1_sel_rd;

assign OUTPUT_ARRR_id_V_1_state_cmp_full = ((OUTPUT_ARRR_id_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign OUTPUT_ARRR_id_V_1_vld_out = OUTPUT_ARRR_id_V_1_state[1'd0];

assign OUTPUT_ARRR_keep_V_1_ack_in = OUTPUT_ARRR_keep_V_1_state[1'd1];

assign OUTPUT_ARRR_keep_V_1_ack_out = OUTPUT_ARRR_TREADY;

assign OUTPUT_ARRR_keep_V_1_load_A = (~OUTPUT_ARRR_keep_V_1_sel_wr & OUTPUT_ARRR_keep_V_1_state_cmp_full);

assign OUTPUT_ARRR_keep_V_1_load_B = (OUTPUT_ARRR_keep_V_1_state_cmp_full & OUTPUT_ARRR_keep_V_1_sel_wr);

assign OUTPUT_ARRR_keep_V_1_sel = OUTPUT_ARRR_keep_V_1_sel_rd;

assign OUTPUT_ARRR_keep_V_1_state_cmp_full = ((OUTPUT_ARRR_keep_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign OUTPUT_ARRR_keep_V_1_vld_out = OUTPUT_ARRR_keep_V_1_state[1'd0];

assign OUTPUT_ARRR_last_V_1_ack_in = OUTPUT_ARRR_last_V_1_state[1'd1];

assign OUTPUT_ARRR_last_V_1_ack_out = OUTPUT_ARRR_TREADY;

assign OUTPUT_ARRR_last_V_1_load_A = (~OUTPUT_ARRR_last_V_1_sel_wr & OUTPUT_ARRR_last_V_1_state_cmp_full);

assign OUTPUT_ARRR_last_V_1_load_B = (OUTPUT_ARRR_last_V_1_state_cmp_full & OUTPUT_ARRR_last_V_1_sel_wr);

assign OUTPUT_ARRR_last_V_1_sel = OUTPUT_ARRR_last_V_1_sel_rd;

assign OUTPUT_ARRR_last_V_1_state_cmp_full = ((OUTPUT_ARRR_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign OUTPUT_ARRR_last_V_1_vld_out = OUTPUT_ARRR_last_V_1_state[1'd0];

assign OUTPUT_ARRR_strb_V_1_ack_in = OUTPUT_ARRR_strb_V_1_state[1'd1];

assign OUTPUT_ARRR_strb_V_1_ack_out = OUTPUT_ARRR_TREADY;

assign OUTPUT_ARRR_strb_V_1_load_A = (~OUTPUT_ARRR_strb_V_1_sel_wr & OUTPUT_ARRR_strb_V_1_state_cmp_full);

assign OUTPUT_ARRR_strb_V_1_load_B = (OUTPUT_ARRR_strb_V_1_state_cmp_full & OUTPUT_ARRR_strb_V_1_sel_wr);

assign OUTPUT_ARRR_strb_V_1_sel = OUTPUT_ARRR_strb_V_1_sel_rd;

assign OUTPUT_ARRR_strb_V_1_state_cmp_full = ((OUTPUT_ARRR_strb_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign OUTPUT_ARRR_strb_V_1_vld_out = OUTPUT_ARRR_strb_V_1_state[1'd0];

assign OUTPUT_ARRR_user_V_1_ack_in = OUTPUT_ARRR_user_V_1_state[1'd1];

assign OUTPUT_ARRR_user_V_1_ack_out = OUTPUT_ARRR_TREADY;

assign OUTPUT_ARRR_user_V_1_load_A = (~OUTPUT_ARRR_user_V_1_sel_wr & OUTPUT_ARRR_user_V_1_state_cmp_full);

assign OUTPUT_ARRR_user_V_1_load_B = (OUTPUT_ARRR_user_V_1_state_cmp_full & OUTPUT_ARRR_user_V_1_sel_wr);

assign OUTPUT_ARRR_user_V_1_sel = OUTPUT_ARRR_user_V_1_sel_rd;

assign OUTPUT_ARRR_user_V_1_state_cmp_full = ((OUTPUT_ARRR_user_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign OUTPUT_ARRR_user_V_1_vld_out = OUTPUT_ARRR_user_V_1_state[1'd0];

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp0_stage6 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp0_stage7 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp0_stage8 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_pp0_stage9 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((1'b0 == INPUT_ARR_dest_V_0_vld_out) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((1'b0 == OUTPUT_ARRR_dest_V_1_ack_in) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((1'b0 == INPUT_ARR_dest_V_0_vld_out) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((1'b0 == OUTPUT_ARRR_dest_V_1_ack_in) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((1'b0 == INPUT_ARR_dest_V_0_vld_out) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_01001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b0 == OUTPUT_ARRR_data_V_1_ack_in) | (1'b0 == OUTPUT_ARRR_id_V_1_ack_in) | (1'b0 == OUTPUT_ARRR_last_V_1_ack_in) | (1'b0 == OUTPUT_ARRR_dest_V_1_ack_in) | (1'b0 == OUTPUT_ARRR_user_V_1_ack_in) | (1'b0 == OUTPUT_ARRR_strb_V_1_ack_in) | (1'b0 == OUTPUT_ARRR_keep_V_1_ack_in))) | ((1'b0 == INPUT_ARR_dest_V_0_vld_out) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage1_11001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b0 == OUTPUT_ARRR_data_V_1_ack_in) | (1'b0 == OUTPUT_ARRR_id_V_1_ack_in) | (1'b0 == OUTPUT_ARRR_last_V_1_ack_in) | (1'b0 == OUTPUT_ARRR_dest_V_1_ack_in) | (1'b0 == OUTPUT_ARRR_user_V_1_ack_in) | (1'b0 == OUTPUT_ARRR_strb_V_1_ack_in) | (1'b0 == OUTPUT_ARRR_keep_V_1_ack_in))) | ((ap_enable_reg_pp0_iter0 == 1'b1) & ((1'b0 == OUTPUT_ARRR_dest_V_1_ack_in) | (1'b0 == INPUT_ARR_dest_V_0_vld_out))));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = (((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b0 == OUTPUT_ARRR_data_V_1_ack_in) | (1'b0 == OUTPUT_ARRR_id_V_1_ack_in) | (1'b0 == OUTPUT_ARRR_last_V_1_ack_in) | (1'b0 == OUTPUT_ARRR_dest_V_1_ack_in) | (1'b0 == OUTPUT_ARRR_user_V_1_ack_in) | (1'b0 == OUTPUT_ARRR_strb_V_1_ack_in) | (1'b0 == OUTPUT_ARRR_keep_V_1_ack_in))) | ((ap_enable_reg_pp0_iter0 == 1'b1) & ((1'b0 == OUTPUT_ARRR_dest_V_1_ack_in) | (1'b0 == INPUT_ARR_dest_V_0_vld_out))));
end

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage2_01001 = ((ap_done_reg == 1'b1) | ((1'b0 == INPUT_ARR_dest_V_0_vld_out) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage2_11001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter0 == 1'b1) & ((1'b0 == OUTPUT_ARRR_dest_V_1_ack_in) | (1'b0 == INPUT_ARR_dest_V_0_vld_out))));
end

always @ (*) begin
    ap_block_pp0_stage2_subdone = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter0 == 1'b1) & ((1'b0 == OUTPUT_ARRR_dest_V_1_ack_in) | (1'b0 == INPUT_ARR_dest_V_0_vld_out))));
end

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage3_01001 = ((1'b0 == INPUT_ARR_dest_V_0_vld_out) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage3_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & ((1'b0 == OUTPUT_ARRR_dest_V_1_ack_in) | (1'b0 == INPUT_ARR_dest_V_0_vld_out)));
end

always @ (*) begin
    ap_block_pp0_stage3_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & ((1'b0 == OUTPUT_ARRR_dest_V_1_ack_in) | (1'b0 == INPUT_ARR_dest_V_0_vld_out)));
end

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage4_01001 = ((1'b0 == INPUT_ARR_dest_V_0_vld_out) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage4_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & ((1'b0 == OUTPUT_ARRR_dest_V_1_ack_in) | (1'b0 == INPUT_ARR_dest_V_0_vld_out)));
end

always @ (*) begin
    ap_block_pp0_stage4_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & ((1'b0 == OUTPUT_ARRR_dest_V_1_ack_in) | (1'b0 == INPUT_ARR_dest_V_0_vld_out)));
end

assign ap_block_pp0_stage5 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage5_01001 = ((1'b0 == INPUT_ARR_dest_V_0_vld_out) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage5_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & ((1'b0 == OUTPUT_ARRR_dest_V_1_ack_in) | (1'b0 == INPUT_ARR_dest_V_0_vld_out)));
end

always @ (*) begin
    ap_block_pp0_stage5_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & ((1'b0 == OUTPUT_ARRR_dest_V_1_ack_in) | (1'b0 == INPUT_ARR_dest_V_0_vld_out)));
end

assign ap_block_pp0_stage6 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage6_01001 = ((1'b0 == INPUT_ARR_dest_V_0_vld_out) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage6_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & ((1'b0 == OUTPUT_ARRR_dest_V_1_ack_in) | (1'b0 == INPUT_ARR_dest_V_0_vld_out)));
end

always @ (*) begin
    ap_block_pp0_stage6_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & ((1'b0 == OUTPUT_ARRR_dest_V_1_ack_in) | (1'b0 == INPUT_ARR_dest_V_0_vld_out)));
end

assign ap_block_pp0_stage7 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage7_01001 = ((1'b0 == INPUT_ARR_dest_V_0_vld_out) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage7_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & ((1'b0 == OUTPUT_ARRR_dest_V_1_ack_in) | (1'b0 == INPUT_ARR_dest_V_0_vld_out)));
end

always @ (*) begin
    ap_block_pp0_stage7_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & ((1'b0 == OUTPUT_ARRR_dest_V_1_ack_in) | (1'b0 == INPUT_ARR_dest_V_0_vld_out)));
end

assign ap_block_pp0_stage8 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage8_01001 = ((1'b0 == INPUT_ARR_dest_V_0_vld_out) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage8_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & ((1'b0 == OUTPUT_ARRR_dest_V_1_ack_in) | (1'b0 == INPUT_ARR_dest_V_0_vld_out)));
end

always @ (*) begin
    ap_block_pp0_stage8_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & ((1'b0 == OUTPUT_ARRR_dest_V_1_ack_in) | (1'b0 == INPUT_ARR_dest_V_0_vld_out)));
end

assign ap_block_pp0_stage9 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage9_01001 = ((1'b0 == INPUT_ARR_dest_V_0_vld_out) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage9_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & ((1'b0 == OUTPUT_ARRR_dest_V_1_ack_in) | (1'b0 == INPUT_ARR_dest_V_0_vld_out)));
end

always @ (*) begin
    ap_block_pp0_stage9_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & ((1'b0 == OUTPUT_ARRR_dest_V_1_ack_in) | (1'b0 == INPUT_ARR_dest_V_0_vld_out)));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state10_pp0_stage8_iter0 = (1'b0 == INPUT_ARR_dest_V_0_vld_out);
end

always @ (*) begin
    ap_block_state11_pp0_stage9_iter0 = (1'b0 == INPUT_ARR_dest_V_0_vld_out);
end

assign ap_block_state12_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state13_pp0_stage1_iter1 = ((1'b0 == OUTPUT_ARRR_data_V_1_ack_in) | (1'b0 == OUTPUT_ARRR_id_V_1_ack_in) | (1'b0 == OUTPUT_ARRR_last_V_1_ack_in) | (1'b0 == OUTPUT_ARRR_dest_V_1_ack_in) | (1'b0 == OUTPUT_ARRR_user_V_1_ack_in) | (1'b0 == OUTPUT_ARRR_strb_V_1_ack_in) | (1'b0 == OUTPUT_ARRR_keep_V_1_ack_in));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter0 = (1'b0 == INPUT_ARR_dest_V_0_vld_out);
end

always @ (*) begin
    ap_block_state3_pp0_stage1_iter0 = (1'b0 == INPUT_ARR_dest_V_0_vld_out);
end

always @ (*) begin
    ap_block_state4_pp0_stage2_iter0 = (1'b0 == INPUT_ARR_dest_V_0_vld_out);
end

always @ (*) begin
    ap_block_state5_pp0_stage3_iter0 = (1'b0 == INPUT_ARR_dest_V_0_vld_out);
end

always @ (*) begin
    ap_block_state6_pp0_stage4_iter0 = (1'b0 == INPUT_ARR_dest_V_0_vld_out);
end

always @ (*) begin
    ap_block_state7_pp0_stage5_iter0 = (1'b0 == INPUT_ARR_dest_V_0_vld_out);
end

always @ (*) begin
    ap_block_state8_pp0_stage6_iter0 = (1'b0 == INPUT_ARR_dest_V_0_vld_out);
end

always @ (*) begin
    ap_block_state9_pp0_stage7_iter0 = (1'b0 == INPUT_ARR_dest_V_0_vld_out);
end

always @ (*) begin
    ap_condition_928 = ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign exitcond_fu_769_p2 = ((i_1_9_reg_1035 == 6'd50) ? 1'b1 : 1'b0);

assign extLd49_cast_fu_721_p1 = x_V_q0;

assign extLd52_cast_fu_665_p1 = x_V_q1;

assign extLd55_cast_fu_643_p1 = x_V_q0;

assign extLd58_cast_fu_593_p1 = x_V_q1;

assign extLd61_cast_fu_571_p1 = x_V_q0;

assign extLd64_cast_fu_521_p1 = x_V_q1;

assign extLd67_cast_fu_499_p1 = x_V_q0;

assign extLd70_cast_fu_449_p1 = x_V_q1;

assign extLd73_cast_fu_422_p1 = x_V_q0;

assign extLd_cast_fu_743_p1 = x_V_q1;

assign i_1_1_fu_459_p2 = (i_reg_333 + 6'd2);

assign i_1_2_fu_471_p2 = (i_reg_333 + 6'd3);

assign i_1_3_fu_531_p2 = (i_reg_333 + 6'd4);

assign i_1_4_fu_543_p2 = (i_reg_333 + 6'd5);

assign i_1_5_fu_603_p2 = (i_reg_333 + 6'd6);

assign i_1_6_fu_615_p2 = (i_reg_333 + 6'd7);

assign i_1_7_fu_675_p2 = (i_reg_333 + 6'd8);

assign i_1_8_fu_687_p2 = (i_reg_333 + 6'd9);

assign i_1_9_fu_699_p2 = (i_reg_333 + 6'd10);

assign i_1_s_fu_398_p2 = (ap_phi_mux_i_phi_fu_337_p6 | 6'd1);

assign p_1_cast_fu_445_p1 = p_1_fu_437_p3;

assign p_1_fu_437_p3 = {{y_V_q1}, {1'd0}};

assign p_2_cast_fu_495_p1 = p_2_fu_487_p3;

assign p_2_fu_487_p3 = {{y_V_q0}, {1'd0}};

assign p_3_cast_fu_517_p1 = p_3_fu_509_p3;

assign p_3_fu_509_p3 = {{y_V_q1}, {1'd0}};

assign p_4_cast_fu_567_p1 = p_4_fu_559_p3;

assign p_4_fu_559_p3 = {{y_V_q0}, {1'd0}};

assign p_5_cast_fu_589_p1 = p_5_fu_581_p3;

assign p_5_fu_581_p3 = {{y_V_q1}, {1'd0}};

assign p_6_cast_fu_639_p1 = p_6_fu_631_p3;

assign p_6_fu_631_p3 = {{y_V_q0}, {1'd0}};

assign p_7_cast_fu_661_p1 = p_7_fu_653_p3;

assign p_7_fu_653_p3 = {{y_V_q1}, {1'd0}};

assign p_8_cast_fu_717_p1 = p_8_fu_709_p3;

assign p_8_fu_709_p3 = {{y_V_q0}, {1'd0}};

assign p_9_cast_fu_739_p1 = p_9_fu_731_p3;

assign p_9_fu_731_p3 = {{y_V_q1}, {1'd0}};

assign p_cast_fu_418_p1 = p_s_fu_410_p3;

assign p_s_fu_410_p3 = {{y_V_q0}, {1'd0}};

assign tmp_2_1_fu_404_p1 = i_1_s_fu_398_p2;

assign tmp_2_2_fu_465_p1 = i_1_1_fu_459_p2;

assign tmp_2_3_fu_477_p1 = i_1_2_fu_471_p2;

assign tmp_2_4_fu_537_p1 = i_1_3_fu_531_p2;

assign tmp_2_5_fu_549_p1 = i_1_4_fu_543_p2;

assign tmp_2_6_fu_609_p1 = i_1_5_fu_603_p2;

assign tmp_2_7_fu_621_p1 = i_1_6_fu_615_p2;

assign tmp_2_8_fu_681_p1 = i_1_7_fu_675_p2;

assign tmp_2_9_fu_693_p1 = i_1_8_fu_687_p2;

assign tmp_2_fu_392_p1 = ap_phi_mux_i_phi_fu_337_p6;

assign tmp_3_1_cast_fu_483_p1 = tmp_3_1_reg_825;

assign tmp_3_1_fu_453_p2 = (extLd70_cast_fu_449_p1 + p_1_cast_fu_445_p1);

assign tmp_3_2_cast_fu_555_p1 = tmp_3_2_reg_875;

assign tmp_3_2_fu_503_p2 = (extLd67_cast_fu_499_p1 + p_2_cast_fu_495_p1);

assign tmp_3_3_cast_fu_627_p1 = tmp_3_3_reg_900;

assign tmp_3_3_fu_525_p2 = (extLd64_cast_fu_521_p1 + p_3_cast_fu_517_p1);

assign tmp_3_4_cast_fu_705_p1 = tmp_3_4_reg_950;

assign tmp_3_4_fu_575_p2 = (extLd61_cast_fu_571_p1 + p_4_cast_fu_567_p1);

assign tmp_3_5_cast_fu_753_p1 = tmp_3_5_reg_955;

assign tmp_3_5_fu_597_p2 = (extLd58_cast_fu_593_p1 + p_5_cast_fu_589_p1);

assign tmp_3_6_cast_fu_757_p1 = tmp_3_6_reg_1005;

assign tmp_3_6_fu_647_p2 = (extLd55_cast_fu_643_p1 + p_6_cast_fu_639_p1);

assign tmp_3_7_cast_fu_761_p1 = tmp_3_7_reg_1010;

assign tmp_3_7_fu_669_p2 = (extLd52_cast_fu_665_p1 + p_7_cast_fu_661_p1);

assign tmp_3_8_cast_fu_765_p1 = tmp_3_8_reg_1066;

assign tmp_3_8_fu_725_p2 = (extLd49_cast_fu_721_p1 + p_8_cast_fu_717_p1);

assign tmp_3_9_cast_fu_774_p1 = tmp_3_9_reg_1071;

assign tmp_3_9_fu_747_p2 = (extLd_cast_fu_743_p1 + p_9_cast_fu_739_p1);

assign tmp_3_cast_fu_432_p1 = tmp_3_fu_426_p2;

assign tmp_3_fu_426_p2 = (extLd73_cast_fu_422_p1 + p_cast_fu_418_p1);

endmodule //Loop_add_loop_proc
